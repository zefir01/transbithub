// <auto-generated />
using System;
using CoreLib;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Backend.Migrations
{
    [DbContext(typeof(DataDBContext))]
    partial class DataDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("CoreLib.Entitys.Advertisement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<int?>("AutoPriceDelay")
                        .HasColumnType("integer")
                        .HasColumnName("auto_price_delay");

                    b.Property<int>("Country")
                        .HasColumnType("integer")
                        .HasColumnName("country");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Equation")
                        .HasColumnType("text")
                        .HasColumnName("equation");

                    b.Property<int>("FiatCurrency")
                        .HasColumnType("integer")
                        .HasColumnName("fiat_currency");

                    b.Property<bool>("IsBuy")
                        .HasColumnType("boolean")
                        .HasColumnName("is_buy");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("is_enabled");

                    b.Property<bool>("LnDisableBalance")
                        .HasColumnType("boolean")
                        .HasColumnName("ln_disable_balance");

                    b.Property<bool>("LnFunding")
                        .HasColumnType("boolean")
                        .HasColumnName("ln_funding");

                    b.Property<decimal>("MaxAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("max_amount");

                    b.Property<string>("Message")
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<decimal>("MinAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("min_amount");

                    b.Property<bool>("MonitorLiquidity")
                        .HasColumnType("boolean")
                        .HasColumnName("monitor_liquidity");

                    b.Property<bool>("NotAnonymous")
                        .HasColumnType("boolean")
                        .HasColumnName("not_anonymous");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint")
                        .HasColumnName("owner_id");

                    b.Property<int>("PaymentType")
                        .HasColumnType("integer")
                        .HasColumnName("payment_type");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<bool>("Trusted")
                        .HasColumnType("boolean")
                        .HasColumnName("trusted");

                    b.Property<long>("Window")
                        .HasColumnType("bigint")
                        .HasColumnName("window");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_advertisements");

                    b.HasIndex("AutoPriceDelay")
                        .HasDatabaseName("ix_advertisements_auto_price_delay");

                    b.HasIndex("Country")
                        .HasDatabaseName("ix_advertisements_country");

                    b.HasIndex("FiatCurrency")
                        .HasDatabaseName("ix_advertisements_fiat_currency");

                    b.HasIndex("IsBuy")
                        .HasDatabaseName("ix_advertisements_is_buy");

                    b.HasIndex("IsEnabled")
                        .HasDatabaseName("ix_advertisements_is_enabled");

                    b.HasIndex("MaxAmount")
                        .HasDatabaseName("ix_advertisements_max_amount");

                    b.HasIndex("MinAmount")
                        .HasDatabaseName("ix_advertisements_min_amount");

                    b.HasIndex("MonitorLiquidity")
                        .HasDatabaseName("ix_advertisements_monitor_liquidity");

                    b.HasIndex("NotAnonymous")
                        .HasDatabaseName("ix_advertisements_not_anonymous");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_advertisements_owner_id");

                    b.HasIndex("PaymentType")
                        .HasDatabaseName("ix_advertisements_payment_type");

                    b.HasIndex("Trusted")
                        .HasDatabaseName("ix_advertisements_trusted");

                    b.ToTable("advertisements");
                });

            modelBuilder.Entity("CoreLib.Entitys.AvgPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("FiatCurrency")
                        .HasColumnType("integer")
                        .HasColumnName("fiat_currency");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_avg_prices");

                    b.HasIndex("FiatCurrency")
                        .HasDatabaseName("ix_avg_prices_fiat_currency");

                    b.ToTable("avg_prices");
                });

            modelBuilder.Entity("CoreLib.Entitys.BlockedUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint")
                        .HasColumnName("owner_id");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_blocked_user");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_blocked_user_owner_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_blocked_user_user_id");

                    b.ToTable("blocked_user");
                });

            modelBuilder.Entity("CoreLib.Entitys.BtcCoreWallet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("BackupTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("backup_time");

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric")
                        .HasColumnName("balance");

                    b.Property<decimal>("Fee")
                        .HasColumnType("numeric")
                        .HasColumnName("fee");

                    b.Property<string>("InstanceUrl")
                        .HasColumnType("text")
                        .HasColumnName("instance_url");

                    b.Property<DateTime>("LastBlock")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_block");

                    b.Property<DateTime>("MaxTransactionsTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("max_transactions_time");

                    b.Property<decimal>("UnconfirmedBalance")
                        .HasColumnType("numeric")
                        .HasColumnName("unconfirmed_balance");

                    b.Property<byte[]>("WalletBackup")
                        .HasColumnType("bytea")
                        .HasColumnName("wallet_backup");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_btc_core_wallets");

                    b.HasIndex("InstanceUrl")
                        .HasDatabaseName("ix_btc_core_wallets_instance_url");

                    b.ToTable("btc_core_wallets");
                });

            modelBuilder.Entity("CoreLib.Entitys.Complaint", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("FromContact")
                        .HasColumnType("text")
                        .HasColumnName("from_contact");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.HasKey("Id")
                        .HasName("pk_complaints");

                    b.ToTable("complaints");
                });

            modelBuilder.Entity("CoreLib.Entitys.CryptoExchangeVariable", b =>
                {
                    b.Property<int>("Key")
                        .HasColumnType("integer")
                        .HasColumnName("key");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric")
                        .HasColumnName("value");

                    b.HasKey("Key")
                        .HasName("pk_crypto_exchange_variables");

                    b.ToTable("crypto_exchange_variables");
                });

            modelBuilder.Entity("CoreLib.Entitys.Deal", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<long?>("AdId")
                        .HasColumnType("bigint")
                        .HasColumnName("ad_id");

                    b.Property<long?>("AdOwnerFeedBackId")
                        .HasColumnType("bigint")
                        .HasColumnName("ad_owner_feed_back_id");

                    b.Property<long?>("AdOwnerId")
                        .HasColumnType("bigint")
                        .HasColumnName("ad_owner_id");

                    b.Property<DateTime>("AutoCancelTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("auto_cancel_time");

                    b.Property<string>("Bolt11")
                        .HasColumnType("text")
                        .HasColumnName("bolt11");

                    b.Property<string>("BtcWallet")
                        .HasColumnType("text")
                        .HasColumnName("btc_wallet");

                    b.Property<DateTime?>("CanceledAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("canceled_at");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("completed_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<decimal>("CryptoAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("crypto_amount");

                    b.Property<decimal>("Fee")
                        .HasColumnType("numeric")
                        .HasColumnName("fee");

                    b.Property<decimal>("FiatAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("fiat_amount");

                    b.Property<DateTime?>("FiatPayedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("fiat_payed_at");

                    b.Property<long?>("InitiatorFeedBackId")
                        .HasColumnType("bigint")
                        .HasColumnName("initiator_feed_back_id");

                    b.Property<long?>("InitiatorId")
                        .HasColumnType("bigint")
                        .HasColumnName("initiator_id");

                    b.Property<bool>("IsFiatPayed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_fiat_payed");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("WithdrawalError")
                        .HasColumnType("text")
                        .HasColumnName("withdrawal_error");

                    b.Property<int>("WithdrawalStatus")
                        .HasColumnType("integer")
                        .HasColumnName("withdrawal_status");

                    b.Property<long?>("invoice_payment_fk")
                        .HasColumnType("bigint")
                        .HasColumnName("invoice_payment_fk");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_deals");

                    b.HasIndex("AdId")
                        .HasDatabaseName("ix_deals_ad_id");

                    b.HasIndex("AdOwnerFeedBackId")
                        .HasDatabaseName("ix_deals_ad_owner_feed_back_id");

                    b.HasIndex("AdOwnerId")
                        .HasDatabaseName("ix_deals_ad_owner_id");

                    b.HasIndex("InitiatorFeedBackId")
                        .HasDatabaseName("ix_deals_initiator_feed_back_id");

                    b.HasIndex("InitiatorId")
                        .HasDatabaseName("ix_deals_initiator_id");

                    b.HasIndex("invoice_payment_fk")
                        .IsUnique()
                        .HasDatabaseName("ix_deals_invoice_payment_fk");

                    b.ToTable("deals");
                });

            modelBuilder.Entity("CoreLib.Entitys.DealFeedBack", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<long?>("FromId")
                        .HasColumnType("bigint")
                        .HasColumnName("from_id");

                    b.Property<bool>("IsPositive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_positive");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<long?>("ToId")
                        .HasColumnType("bigint")
                        .HasColumnName("to_id");

                    b.HasKey("Id")
                        .HasName("pk_feedbacks");

                    b.HasIndex("FromId")
                        .HasDatabaseName("ix_feedbacks_from_id");

                    b.HasIndex("ToId")
                        .HasDatabaseName("ix_feedbacks_to_id");

                    b.ToTable("feedbacks");
                });

            modelBuilder.Entity("CoreLib.Entitys.DealMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<long?>("DealId")
                        .HasColumnType("bigint")
                        .HasColumnName("deal_id");

                    b.Property<long?>("OwnerId")
                        .HasColumnType("bigint")
                        .HasColumnName("owner_id");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<long?>("deal_fk")
                        .HasColumnType("bigint")
                        .HasColumnName("deal_fk");

                    b.HasKey("Id")
                        .HasName("pk_deal_message");

                    b.HasIndex("DealId")
                        .HasDatabaseName("ix_deal_message_deal_id");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_deal_message_owner_id");

                    b.HasIndex("deal_fk")
                        .HasDatabaseName("ix_deal_message_deal_fk");

                    b.ToTable("deal_message");
                });

            modelBuilder.Entity("CoreLib.Entitys.Dispute", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<long?>("arbitor_fk")
                        .HasColumnType("bigint")
                        .HasColumnName("arbitor_fk");

                    b.Property<long?>("deal_fk")
                        .HasColumnType("bigint")
                        .HasColumnName("deal_fk");

                    b.HasKey("Id")
                        .HasName("pk_disputes");

                    b.HasIndex("arbitor_fk")
                        .HasDatabaseName("ix_disputes_arbitor_fk");

                    b.HasIndex("deal_fk")
                        .IsUnique()
                        .HasDatabaseName("ix_disputes_deal_fk");

                    b.ToTable("disputes");
                });

            modelBuilder.Entity("CoreLib.Entitys.FiatExchangeVariable", b =>
                {
                    b.Property<int>("Key")
                        .HasColumnType("integer")
                        .HasColumnName("key");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric")
                        .HasColumnName("value");

                    b.HasKey("Key")
                        .HasName("pk_fiat_exchange_variables");

                    b.ToTable("fiat_exchange_variables");
                });

            modelBuilder.Entity("CoreLib.Entitys.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<long?>("ConversationMessageId")
                        .HasColumnType("bigint")
                        .HasColumnName("conversation_message_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsEmpty")
                        .HasColumnType("boolean")
                        .HasColumnName("is_empty");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<byte[]>("Original")
                        .HasColumnType("bytea")
                        .HasColumnName("original");

                    b.Property<byte[]>("Preview")
                        .HasColumnType("bytea")
                        .HasColumnName("preview");

                    b.Property<long?>("deal_message_fk")
                        .HasColumnType("bigint")
                        .HasColumnName("deal_message_fk");

                    b.Property<long?>("invoice_fk")
                        .HasColumnType("bigint")
                        .HasColumnName("invoice_fk");

                    b.Property<long?>("invoice_secret_fk")
                        .HasColumnType("bigint")
                        .HasColumnName("invoice_secret_fk");

                    b.Property<long?>("owner_fk")
                        .HasColumnType("bigint")
                        .HasColumnName("owner_fk");

                    b.HasKey("Id")
                        .HasName("pk_images");

                    b.HasIndex("ConversationMessageId")
                        .HasDatabaseName("ix_images_conversation_message_id");

                    b.HasIndex("IsEmpty")
                        .HasDatabaseName("ix_images_is_empty");

                    b.HasIndex("deal_message_fk")
                        .HasDatabaseName("ix_images_deal_message_fk");

                    b.HasIndex("invoice_fk")
                        .HasDatabaseName("ix_images_invoice_fk");

                    b.HasIndex("invoice_secret_fk")
                        .HasDatabaseName("ix_images_invoice_secret_fk");

                    b.HasIndex("owner_fk")
                        .HasDatabaseName("ix_images_owner_fk");

                    b.ToTable("images");
                });

            modelBuilder.Entity("CoreLib.Entitys.InAddress", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<long?>("BtcCoreWalletId")
                        .HasColumnType("bigint")
                        .HasColumnName("btc_core_wallet_id");

                    b.Property<bool>("IsBech32")
                        .HasColumnType("boolean")
                        .HasColumnName("is_bech32");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint")
                        .HasColumnName("owner_id");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_in_address");

                    b.HasIndex("BtcCoreWalletId")
                        .HasDatabaseName("ix_in_address_btc_core_wallet_id");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_in_address_owner_id");

                    b.ToTable("in_address");
                });

            modelBuilder.Entity("CoreLib.Entitys.InTransaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<long>("AddressId")
                        .HasColumnType("bigint")
                        .HasColumnName("address_id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<int>("Confirmations")
                        .HasColumnType("integer")
                        .HasColumnName("confirmations");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("time");

                    b.Property<string>("TxId")
                        .HasColumnType("text")
                        .HasColumnName("tx_id");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_in_transaction");

                    b.HasIndex("AddressId")
                        .HasDatabaseName("ix_in_transaction_address_id");

                    b.HasIndex("Confirmations")
                        .HasDatabaseName("ix_in_transaction_confirmations");

                    b.HasIndex("TxId")
                        .HasDatabaseName("ix_in_transaction_tx_id");

                    b.ToTable("in_transaction");
                });

            modelBuilder.Entity("CoreLib.Entitys.Invoices.Conversation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<bool>("BuyerDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("buyer_deleted");

                    b.Property<long?>("BuyerId")
                        .HasColumnType("bigint")
                        .HasColumnName("buyer_id");

                    b.Property<bool>("SellerDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("seller_deleted");

                    b.Property<long?>("SellerId")
                        .HasColumnType("bigint")
                        .HasColumnName("seller_id");

                    b.Property<long?>("invoice_fk")
                        .HasColumnType("bigint")
                        .HasColumnName("invoice_fk");

                    b.Property<long?>("payment_fk")
                        .HasColumnType("bigint")
                        .HasColumnName("payment_fk");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_conversation");

                    b.HasIndex("BuyerId")
                        .HasDatabaseName("ix_conversation_buyer_id");

                    b.HasIndex("SellerId")
                        .HasDatabaseName("ix_conversation_seller_id");

                    b.HasIndex("invoice_fk")
                        .HasDatabaseName("ix_conversation_invoice_fk");

                    b.HasIndex("payment_fk")
                        .IsUnique()
                        .HasDatabaseName("ix_conversation_payment_fk");

                    b.ToTable("conversation");
                });

            modelBuilder.Entity("CoreLib.Entitys.Invoices.ConversationMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<long?>("ConversationId")
                        .HasColumnType("bigint")
                        .HasColumnName("conversation_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<long?>("OwnerId")
                        .HasColumnType("bigint")
                        .HasColumnName("owner_id");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_conversation_message");

                    b.HasIndex("ConversationId")
                        .HasDatabaseName("ix_conversation_message_conversation_id");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_conversation_message_owner_id");

                    b.ToTable("conversation_message");
                });

            modelBuilder.Entity("CoreLib.Entitys.Invoices.Invoice", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<decimal>("CurrentCryptoPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("current_crypto_price");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_at");

                    b.Property<DateTime?>("ExpireTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("expire_time");

                    b.Property<decimal>("Fee")
                        .HasColumnType("numeric")
                        .HasColumnName("fee");

                    b.Property<int>("FiatCurrency")
                        .HasColumnType("integer")
                        .HasColumnName("fiat_currency");

                    b.Property<bool>("IsBaseCrypto")
                        .HasColumnType("boolean")
                        .HasColumnName("is_base_crypto");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("boolean")
                        .HasColumnName("is_private");

                    b.Property<int>("IsService")
                        .HasColumnType("integer")
                        .HasColumnName("is_service");

                    b.Property<bool>("LimitLiquidity")
                        .HasColumnType("boolean")
                        .HasColumnName("limit_liquidity");

                    b.Property<int>("PaymentsCount")
                        .HasColumnType("integer")
                        .HasColumnName("payments_count");

                    b.Property<int>("PiecesMax")
                        .HasColumnType("integer")
                        .HasColumnName("pieces_max");

                    b.Property<int>("PiecesMin")
                        .HasColumnType("integer")
                        .HasColumnName("pieces_min");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<string>("PriceVariable")
                        .HasColumnType("text")
                        .HasColumnName("price_variable");

                    b.Property<long?>("RefundId")
                        .HasColumnType("bigint")
                        .HasColumnName("refund_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<bool>("TargetDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("target_deleted");

                    b.Property<long?>("TargetUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("target_user_id");

                    b.Property<decimal>("TotalPayedCrypto")
                        .HasColumnType("numeric")
                        .HasColumnName("total_payed_crypto");

                    b.Property<int>("TtlMinutes")
                        .HasColumnType("integer")
                        .HasColumnName("ttl_minutes");

                    b.Property<long>("owner_fk")
                        .HasColumnType("bigint")
                        .HasColumnName("owner_fk");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_invoices");

                    b.HasIndex("ExpireTime")
                        .HasDatabaseName("ix_invoices_expire_time");

                    b.HasIndex("IsPrivate")
                        .HasDatabaseName("ix_invoices_is_private");

                    b.HasIndex("RefundId")
                        .HasDatabaseName("ix_invoices_refund_id");

                    b.HasIndex("Status")
                        .HasDatabaseName("ix_invoices_status");

                    b.HasIndex("TargetUserId")
                        .HasDatabaseName("ix_invoices_target_user_id");

                    b.HasIndex("TtlMinutes")
                        .HasDatabaseName("ix_invoices_ttl_minutes");

                    b.HasIndex("owner_fk")
                        .HasDatabaseName("ix_invoices_owner_fk");

                    b.ToTable("invoices");
                });

            modelBuilder.Entity("CoreLib.Entitys.Invoices.InvoiceIntegration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Redirect")
                        .HasColumnType("text")
                        .HasColumnName("redirect");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<long?>("invoice_fk")
                        .HasColumnType("bigint")
                        .HasColumnName("invoice_fk");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_invoice_integration");

                    b.HasIndex("invoice_fk")
                        .IsUnique()
                        .HasDatabaseName("ix_invoice_integration_invoice_fk");

                    b.ToTable("invoice_integration");
                });

            modelBuilder.Entity("CoreLib.Entitys.Invoices.InvoicePayment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<decimal>("CryptoAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("crypto_amount");

                    b.Property<decimal>("Fee")
                        .HasColumnType("numeric")
                        .HasColumnName("fee");

                    b.Property<long?>("InvoiceSnapshotKey")
                        .HasColumnType("bigint")
                        .HasColumnName("invoice_snapshot_key");

                    b.Property<bool>("IsRefund")
                        .HasColumnType("boolean")
                        .HasColumnName("is_refund");

                    b.Property<long?>("OwnerFeedbackId")
                        .HasColumnType("bigint")
                        .HasColumnName("owner_feedback_id");

                    b.Property<int>("Pieces")
                        .HasColumnType("integer")
                        .HasColumnName("pieces");

                    b.Property<int>("Refunded")
                        .HasColumnType("integer")
                        .HasColumnName("refunded");

                    b.Property<int>("Refunding")
                        .HasColumnType("integer")
                        .HasColumnName("refunding");

                    b.Property<long?>("SellerFeedbackId")
                        .HasColumnType("bigint")
                        .HasColumnName("seller_feedback_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<long?>("invoice_fk")
                        .HasColumnType("bigint")
                        .HasColumnName("invoice_fk");

                    b.Property<long?>("owner_fk")
                        .HasColumnType("bigint")
                        .HasColumnName("owner_fk");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_invoice_payment");

                    b.HasIndex("InvoiceSnapshotKey")
                        .HasDatabaseName("ix_invoice_payment_invoice_snapshot_key");

                    b.HasIndex("OwnerFeedbackId")
                        .HasDatabaseName("ix_invoice_payment_owner_feedback_id");

                    b.HasIndex("SellerFeedbackId")
                        .HasDatabaseName("ix_invoice_payment_seller_feedback_id");

                    b.HasIndex("invoice_fk")
                        .HasDatabaseName("ix_invoice_payment_invoice_fk");

                    b.HasIndex("owner_fk")
                        .HasDatabaseName("ix_invoice_payment_owner_fk");

                    b.ToTable("invoice_payment");
                });

            modelBuilder.Entity("CoreLib.Entitys.Invoices.InvoicePaymentFeedback", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsPositive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_positive");

                    b.Property<string>("Message")
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<long?>("OwnerId")
                        .HasColumnType("bigint")
                        .HasColumnName("owner_id");

                    b.Property<long?>("ToId")
                        .HasColumnType("bigint")
                        .HasColumnName("to_id");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_invoice_payment_feedback");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_invoice_payment_feedback_owner_id");

                    b.HasIndex("ToId")
                        .HasDatabaseName("ix_invoice_payment_feedback_to_id");

                    b.ToTable("invoice_payment_feedback");
                });

            modelBuilder.Entity("CoreLib.Entitys.Invoices.InvoiceSecret", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<long?>("PaymentId")
                        .HasColumnType("bigint")
                        .HasColumnName("payment_id");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.Property<long>("invoice_fk")
                        .HasColumnType("bigint")
                        .HasColumnName("invoice_fk");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_invoice_secret");

                    b.HasIndex("PaymentId")
                        .HasDatabaseName("ix_invoice_secret_payment_id");

                    b.HasIndex("invoice_fk")
                        .HasDatabaseName("ix_invoice_secret_invoice_fk");

                    b.ToTable("invoice_secret");
                });

            modelBuilder.Entity("CoreLib.Entitys.IpCountry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("Country")
                        .HasColumnType("integer")
                        .HasColumnName("country");

                    b.Property<long>("From")
                        .HasColumnType("bigint")
                        .HasColumnName("from");

                    b.Property<long>("To")
                        .HasColumnType("bigint")
                        .HasColumnName("to");

                    b.HasKey("Id")
                        .HasName("pk_ip_countries");

                    b.HasIndex("From")
                        .HasDatabaseName("ix_ip_countries_from");

                    b.HasIndex("To")
                        .HasDatabaseName("ix_ip_countries_to");

                    b.HasIndex("From", "To")
                        .HasDatabaseName("ix_ip_countries_from_to");

                    b.ToTable("ip_countries");
                });

            modelBuilder.Entity("CoreLib.Entitys.LN.LNInvoice", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<string>("Bolt11")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("bolt11");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime>("ExpiresIn")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("expires_in");

                    b.Property<long>("LndAddIndex")
                        .HasColumnType("bigint")
                        .HasColumnName("lnd_add_index");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint")
                        .HasColumnName("owner_id");

                    b.Property<byte[]>("RHash")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("rhash");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<long?>("deal_fk")
                        .HasColumnType("bigint")
                        .HasColumnName("deal_fk");

                    b.Property<long?>("payment_fk")
                        .HasColumnType("bigint")
                        .HasColumnName("payment_fk");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_lninvoices");

                    b.HasIndex("LndAddIndex")
                        .HasDatabaseName("ix_lninvoices_lnd_add_index");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_lninvoices_owner_id");

                    b.HasIndex("Status")
                        .HasDatabaseName("ix_lninvoices_status");

                    b.HasIndex("deal_fk")
                        .IsUnique()
                        .HasDatabaseName("ix_lninvoices_deal_fk");

                    b.HasIndex("payment_fk")
                        .IsUnique()
                        .HasDatabaseName("ix_lninvoices_payment_fk");

                    b.ToTable("lninvoices");
                });

            modelBuilder.Entity("CoreLib.Entitys.LN.LnPaymentRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<string>("Bolt11")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("bolt11");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Error")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("error");

                    b.Property<decimal>("Fee")
                        .HasColumnType("numeric")
                        .HasColumnName("fee");

                    b.Property<decimal>("FeeFromBalance")
                        .HasColumnType("numeric")
                        .HasColumnName("fee_from_balance");

                    b.Property<string>("PaymentHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("payment_hash");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<long?>("deal_fk")
                        .HasColumnType("bigint")
                        .HasColumnName("deal_fk");

                    b.Property<long>("owner_fk")
                        .HasColumnType("bigint")
                        .HasColumnName("owner_fk");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_ln_payment_requests");

                    b.HasIndex("deal_fk")
                        .IsUnique()
                        .HasDatabaseName("ix_ln_payment_requests_deal_fk");

                    b.HasIndex("owner_fk")
                        .HasDatabaseName("ix_ln_payment_requests_owner_fk");

                    b.ToTable("ln_payment_requests");
                });

            modelBuilder.Entity("CoreLib.Entitys.OutTransaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<int>("Confirmations")
                        .HasColumnType("integer")
                        .HasColumnName("confirmations");

                    b.Property<decimal>("Fee")
                        .HasColumnType("numeric")
                        .HasColumnName("fee");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("time");

                    b.Property<string>("TxId")
                        .HasColumnType("text")
                        .HasColumnName("tx_id");

                    b.Property<long?>("WalletId")
                        .HasColumnType("bigint")
                        .HasColumnName("wallet_id");

                    b.Property<long?>("request_id")
                        .HasColumnType("bigint")
                        .HasColumnName("request_id");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_out_transaction");

                    b.HasIndex("Confirmations")
                        .HasDatabaseName("ix_out_transaction_confirmations");

                    b.HasIndex("TxId")
                        .HasDatabaseName("ix_out_transaction_tx_id");

                    b.HasIndex("WalletId")
                        .HasDatabaseName("ix_out_transaction_wallet_id");

                    b.HasIndex("request_id")
                        .IsUnique()
                        .HasDatabaseName("ix_out_transaction_request_id");

                    b.ToTable("out_transaction");
                });

            modelBuilder.Entity("CoreLib.Entitys.OutTransactionRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<long?>("BtcCoreWalletId")
                        .HasColumnType("bigint")
                        .HasColumnName("btc_core_wallet_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<decimal>("Fee")
                        .HasColumnType("numeric")
                        .HasColumnName("fee");

                    b.Property<bool>("IsStarted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_started");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint")
                        .HasColumnName("owner_id");

                    b.Property<bool>("SubtractFeeFromAmount")
                        .HasColumnType("boolean")
                        .HasColumnName("subtract_fee_from_amount");

                    b.Property<long?>("deal_fk")
                        .HasColumnType("bigint")
                        .HasColumnName("deal_fk");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_out_transaction_requests");

                    b.HasIndex("BtcCoreWalletId")
                        .HasDatabaseName("ix_out_transaction_requests_btc_core_wallet_id");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_out_transaction_requests_owner_id");

                    b.HasIndex("deal_fk")
                        .IsUnique()
                        .HasDatabaseName("ix_out_transaction_requests_deal_fk");

                    b.ToTable("out_transaction_requests");
                });

            modelBuilder.Entity("CoreLib.Entitys.Promise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<long?>("CreatorId")
                        .HasColumnType("bigint")
                        .HasColumnName("creator_id");

                    b.Property<long?>("InvoicePaymentId")
                        .HasColumnType("bigint")
                        .HasColumnName("invoice_payment_id");

                    b.Property<bool>("Locked")
                        .HasColumnType("boolean")
                        .HasColumnName("locked");

                    b.Property<string>("Password")
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<long?>("deal_locked_fk")
                        .HasColumnType("bigint")
                        .HasColumnName("deal_locked_fk");

                    b.Property<long?>("payment_fk")
                        .HasColumnType("bigint")
                        .HasColumnName("payment_fk");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_promises");

                    b.HasIndex("CreatorId")
                        .HasDatabaseName("ix_promises_creator_id");

                    b.HasIndex("InvoicePaymentId")
                        .IsUnique()
                        .HasDatabaseName("ix_promises_invoice_payment_id");

                    b.HasIndex("deal_locked_fk")
                        .IsUnique()
                        .HasDatabaseName("ix_promises_deal_locked_fk");

                    b.HasIndex("payment_fk")
                        .HasDatabaseName("ix_promises_payment_fk");

                    b.ToTable("promises");
                });

            modelBuilder.Entity("CoreLib.Entitys.Snapshots.InvoiceSnapshot", b =>
                {
                    b.Property<long>("Key")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("key")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<decimal>("CurrentCryptoPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("current_crypto_price");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_at");

                    b.Property<DateTime?>("ExpireTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("expire_time");

                    b.Property<decimal>("Fee")
                        .HasColumnType("numeric")
                        .HasColumnName("fee");

                    b.Property<int>("FiatCurrency")
                        .HasColumnType("integer")
                        .HasColumnName("fiat_currency");

                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<bool>("IsBaseCrypto")
                        .HasColumnType("boolean")
                        .HasColumnName("is_base_crypto");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("boolean")
                        .HasColumnName("is_private");

                    b.Property<bool>("LimitLiquidity")
                        .HasColumnType("boolean")
                        .HasColumnName("limit_liquidity");

                    b.Property<long?>("OwnerId")
                        .HasColumnType("bigint")
                        .HasColumnName("owner_id");

                    b.Property<int>("PaymentsCount")
                        .HasColumnType("integer")
                        .HasColumnName("payments_count");

                    b.Property<int>("PiecesMax")
                        .HasColumnType("integer")
                        .HasColumnName("pieces_max");

                    b.Property<int>("PiecesMin")
                        .HasColumnType("integer")
                        .HasColumnName("pieces_min");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<string>("PriceVariable")
                        .HasColumnType("text")
                        .HasColumnName("price_variable");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<bool>("TargetDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("target_deleted");

                    b.Property<long?>("TargetUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("target_user_id");

                    b.Property<decimal>("TotalPayedCrypto")
                        .HasColumnType("numeric")
                        .HasColumnName("total_payed_crypto");

                    b.Property<int>("TtlMinutes")
                        .HasColumnType("integer")
                        .HasColumnName("ttl_minutes");

                    b.HasKey("Key")
                        .HasName("pk_invoice_snapshot");

                    b.HasIndex("ExpireTime")
                        .HasDatabaseName("ix_invoice_snapshot_expire_time");

                    b.HasIndex("IsPrivate")
                        .HasDatabaseName("ix_invoice_snapshot_is_private");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_invoice_snapshot_owner_id");

                    b.HasIndex("Status")
                        .HasDatabaseName("ix_invoice_snapshot_status");

                    b.HasIndex("TargetUserId")
                        .HasDatabaseName("ix_invoice_snapshot_target_user_id");

                    b.HasIndex("TtlMinutes")
                        .HasDatabaseName("ix_invoice_snapshot_ttl_minutes");

                    b.ToTable("invoice_snapshot");
                });

            modelBuilder.Entity("CoreLib.Entitys.TimeTableItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<long?>("AdvertisementId")
                        .HasColumnType("bigint")
                        .HasColumnName("advertisement_id");

                    b.Property<int>("Day")
                        .HasColumnType("integer")
                        .HasColumnName("day");

                    b.Property<byte>("End")
                        .HasColumnType("smallint")
                        .HasColumnName("end");

                    b.Property<byte>("Start")
                        .HasColumnType("smallint")
                        .HasColumnName("start");

                    b.HasKey("Id")
                        .HasName("pk_time_table_item");

                    b.HasIndex("AdvertisementId")
                        .HasDatabaseName("ix_time_table_item_advertisement_id");

                    b.HasIndex("Day")
                        .HasDatabaseName("ix_time_table_item_day");

                    b.HasIndex("End")
                        .HasDatabaseName("ix_time_table_item_end");

                    b.HasIndex("Start")
                        .HasDatabaseName("ix_time_table_item_start");

                    b.ToTable("time_table_item");
                });

            modelBuilder.Entity("CoreLib.Entitys.TrustedUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint")
                        .HasColumnName("owner_id");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_trusted_user");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_trusted_user_owner_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_trusted_user_user_id");

                    b.ToTable("trusted_user");
                });

            modelBuilder.Entity("CoreLib.Entitys.UserBalance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric")
                        .HasColumnName("balance");

                    b.Property<decimal>("Deposited")
                        .HasColumnType("numeric")
                        .HasColumnName("deposited");

                    b.Property<decimal>("UnconfirmedBalance")
                        .HasColumnType("numeric")
                        .HasColumnName("unconfirmed_balance");

                    b.Property<long?>("owner_fk")
                        .HasColumnType("bigint")
                        .HasColumnName("owner_fk");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_user_balance");

                    b.HasIndex("owner_fk")
                        .IsUnique()
                        .HasDatabaseName("ix_user_balance_owner_fk");

                    b.ToTable("user_balance");
                });

            modelBuilder.Entity("CoreLib.Entitys.UserDataParts.UserData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<long>("BlockedCount")
                        .HasColumnType("bigint")
                        .HasColumnName("blocked_count");

                    b.Property<bool>("BuysDisabled")
                        .HasColumnType("boolean")
                        .HasColumnName("buys_disabled");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("DefaultCurrency")
                        .HasColumnType("integer")
                        .HasColumnName("default_currency");

                    b.Property<string>("Introduction")
                        .HasColumnType("text")
                        .HasColumnName("introduction");

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("boolean")
                        .HasColumnName("is_anonymous");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsSupport")
                        .HasColumnType("boolean")
                        .HasColumnName("is_support");

                    b.Property<bool>("SalesDisabled")
                        .HasColumnType("boolean")
                        .HasColumnName("sales_disabled");

                    b.Property<string>("Site")
                        .HasColumnType("text")
                        .HasColumnName("site");

                    b.Property<string>("TimeZone")
                        .HasColumnType("text")
                        .HasColumnName("time_zone");

                    b.Property<long>("TrustedCount")
                        .HasColumnType("bigint")
                        .HasColumnName("trusted_count");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("UserName")
                        .HasColumnType("text")
                        .HasColumnName("user_name");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_user_datas");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_datas_user_id");

                    b.HasIndex("UserName")
                        .HasDatabaseName("ix_user_datas_user_name");

                    b.ToTable("user_datas");
                });

            modelBuilder.Entity("CoreLib.Entitys.UserEvent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<long?>("ConversationId")
                        .HasColumnType("bigint")
                        .HasColumnName("conversation_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<long?>("DealId")
                        .HasColumnType("bigint")
                        .HasColumnName("deal_id");

                    b.Property<long?>("DealMessageId")
                        .HasColumnType("bigint")
                        .HasColumnName("deal_message_id");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("uuid")
                        .HasColumnName("image_id");

                    b.Property<long?>("InvoiceId")
                        .HasColumnType("bigint")
                        .HasColumnName("invoice_id");

                    b.Property<long?>("InvoicePaymentId")
                        .HasColumnType("bigint")
                        .HasColumnName("invoice_payment_id");

                    b.Property<int>("Source")
                        .HasColumnType("integer")
                        .HasColumnName("source");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<long?>("creater_id")
                        .HasColumnType("bigint")
                        .HasColumnName("creater_id");

                    b.Property<long?>("receiver_id")
                        .HasColumnType("bigint")
                        .HasColumnName("receiver_id");

                    b.HasKey("Id")
                        .HasName("pk_user_event");

                    b.HasIndex("ConversationId")
                        .HasDatabaseName("ix_user_event_conversation_id");

                    b.HasIndex("DealId")
                        .HasDatabaseName("ix_user_event_deal_id");

                    b.HasIndex("DealMessageId")
                        .HasDatabaseName("ix_user_event_deal_message_id");

                    b.HasIndex("InvoiceId")
                        .HasDatabaseName("ix_user_event_invoice_id");

                    b.HasIndex("InvoicePaymentId")
                        .HasDatabaseName("ix_user_event_invoice_payment_id");

                    b.HasIndex("creater_id")
                        .HasDatabaseName("ix_user_event_creater_id");

                    b.HasIndex("receiver_id")
                        .HasDatabaseName("ix_user_event_receiver_id");

                    b.ToTable("user_event");
                });

            modelBuilder.Entity("CoreLib.Entitys.UserLastOnline", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("LastOnline")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_online");

                    b.Property<long?>("owner_fk")
                        .HasColumnType("bigint")
                        .HasColumnName("owner_fk");

                    b.HasKey("Id")
                        .HasName("pk_user_last_online");

                    b.HasIndex("owner_fk")
                        .IsUnique()
                        .HasDatabaseName("ix_user_last_online_owner_fk");

                    b.ToTable("user_last_online");
                });

            modelBuilder.Entity("CoreLib.Entitys.VariablesMetadata", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_variables_metadata");

                    b.ToTable("variables_metadata");
                });

            modelBuilder.Entity("CoreLib.Entitys.YmId", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("YandexId")
                        .HasColumnType("text")
                        .HasColumnName("yandex_id");

                    b.HasKey("Id")
                        .HasName("pk_ym_ids");

                    b.ToTable("ym_ids");
                });

            modelBuilder.Entity("CoreLib.Entitys.YmIdsConnection", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<long?>("YmIdId")
                        .HasColumnType("bigint")
                        .HasColumnName("ym_id_id");

                    b.HasKey("Id")
                        .HasName("pk_ym_ids_connections");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_ym_ids_connections_user_id");

                    b.HasIndex("YmIdId")
                        .HasDatabaseName("ix_ym_ids_connections_ym_id_id");

                    b.ToTable("ym_ids_connections");
                });

            modelBuilder.Entity("CoreLib.Entitys.Advertisement", b =>
                {
                    b.HasOne("CoreLib.Entitys.UserDataParts.UserData", "Owner")
                        .WithMany("Advertisements")
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("fk_advertisements_user_datas_owner_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("CoreLib.Entitys.Advertisement+AdMetadata", "Metadata", b1 =>
                        {
                            b1.Property<long>("AdvertisementId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasColumnName("id")
                                .UseIdentityByDefaultColumn();

                            b1.Property<DateTime?>("AutoPriceUpdateTime")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("metadata_auto_price_update_time");

                            b1.Property<decimal>("MaxAmount")
                                .HasColumnType("numeric")
                                .HasColumnName("metadata_max_amount");

                            b1.Property<decimal>("MaxCryptoAmount")
                                .HasColumnType("numeric")
                                .HasColumnName("metadata_max_crypto_amount");

                            b1.Property<decimal>("MinCryptoAmount")
                                .HasColumnType("numeric")
                                .HasColumnName("metadata_min_crypto_amount");

                            b1.Property<decimal>("Price")
                                .HasColumnType("numeric")
                                .HasColumnName("metadata_price");

                            b1.Property<int>("Status")
                                .HasColumnType("integer")
                                .HasColumnName("metadata_status");

                            b1.HasKey("AdvertisementId")
                                .HasName("pk_advertisements");

                            b1.HasIndex("AutoPriceUpdateTime")
                                .HasDatabaseName("ix_advertisements_metadata_auto_price_update_time");

                            b1.HasIndex("MaxAmount")
                                .HasDatabaseName("ix_advertisements_metadata_max_amount");

                            b1.HasIndex("MaxCryptoAmount")
                                .HasDatabaseName("ix_advertisements_metadata_max_crypto_amount");

                            b1.HasIndex("MinCryptoAmount")
                                .HasDatabaseName("ix_advertisements_metadata_min_crypto_amount");

                            b1.HasIndex("Price")
                                .HasDatabaseName("ix_advertisements_metadata_price");

                            b1.HasIndex("Status")
                                .HasDatabaseName("ix_advertisements_metadata_status");

                            b1.ToTable("advertisements");

                            b1.WithOwner("Advertisement")
                                .HasForeignKey("AdvertisementId")
                                .HasConstraintName("fk_advertisements_advertisements_id");

                            b1.Navigation("Advertisement");
                        });

                    b.Navigation("Metadata");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("CoreLib.Entitys.BlockedUser", b =>
                {
                    b.HasOne("CoreLib.Entitys.UserDataParts.UserData", "Owner")
                        .WithMany("BlockedUsers")
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("fk_blocked_user_user_datas_owner_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entitys.UserDataParts.UserData", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_blocked_user_user_datas_user_id");

                    b.Navigation("Owner");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoreLib.Entitys.Deal", b =>
                {
                    b.HasOne("CoreLib.Entitys.Advertisement", "Ad")
                        .WithMany()
                        .HasForeignKey("AdId")
                        .HasConstraintName("fk_deals_advertisements_ad_id");

                    b.HasOne("CoreLib.Entitys.DealFeedBack", "AdOwnerFeedBack")
                        .WithMany()
                        .HasForeignKey("AdOwnerFeedBackId")
                        .HasConstraintName("fk_deals_feedbacks_ad_owner_feed_back_id");

                    b.HasOne("CoreLib.Entitys.UserDataParts.UserData", "AdOwner")
                        .WithMany("DealsAdOwner")
                        .HasForeignKey("AdOwnerId")
                        .HasConstraintName("fk_deals_user_datas_ad_owner_id");

                    b.HasOne("CoreLib.Entitys.DealFeedBack", "InitiatorFeedBack")
                        .WithMany()
                        .HasForeignKey("InitiatorFeedBackId")
                        .HasConstraintName("fk_deals_feedbacks_initiator_feed_back_id");

                    b.HasOne("CoreLib.Entitys.UserDataParts.UserData", "Initiator")
                        .WithMany("DealsInitiator")
                        .HasForeignKey("InitiatorId")
                        .HasConstraintName("fk_deals_user_datas_initiator_id");

                    b.HasOne("CoreLib.Entitys.Invoices.InvoicePayment", "InvoicePayment")
                        .WithOne("Deal")
                        .HasForeignKey("CoreLib.Entitys.Deal", "invoice_payment_fk")
                        .HasConstraintName("fk_deals_invoice_payment_invoice_payment_fk");

                    b.Navigation("Ad");

                    b.Navigation("AdOwner");

                    b.Navigation("AdOwnerFeedBack");

                    b.Navigation("Initiator");

                    b.Navigation("InitiatorFeedBack");

                    b.Navigation("InvoicePayment");
                });

            modelBuilder.Entity("CoreLib.Entitys.DealFeedBack", b =>
                {
                    b.HasOne("CoreLib.Entitys.UserDataParts.UserData", "From")
                        .WithMany()
                        .HasForeignKey("FromId")
                        .HasConstraintName("fk_feedbacks_user_datas_from_id");

                    b.HasOne("CoreLib.Entitys.UserDataParts.UserData", "To")
                        .WithMany("DealsFeedbacksToMe")
                        .HasForeignKey("ToId")
                        .HasConstraintName("fk_feedbacks_user_datas_to_id");

                    b.Navigation("From");

                    b.Navigation("To");
                });

            modelBuilder.Entity("CoreLib.Entitys.DealMessage", b =>
                {
                    b.HasOne("CoreLib.Entitys.Deal", null)
                        .WithMany("Messages")
                        .HasForeignKey("DealId")
                        .HasConstraintName("fk_deal_message_deals_deal_id");

                    b.HasOne("CoreLib.Entitys.UserDataParts.UserData", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("fk_deal_message_user_datas_owner_id");

                    b.HasOne("CoreLib.Entitys.Deal", "Deal")
                        .WithMany()
                        .HasForeignKey("deal_fk")
                        .HasConstraintName("fk_deal_message_deals_deal_fk");

                    b.Navigation("Deal");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("CoreLib.Entitys.Dispute", b =>
                {
                    b.HasOne("CoreLib.Entitys.UserDataParts.UserData", "Arbitor")
                        .WithMany()
                        .HasForeignKey("arbitor_fk")
                        .HasConstraintName("fk_disputes_user_datas_arbitor_fk");

                    b.HasOne("CoreLib.Entitys.Deal", "Deal")
                        .WithOne("Dispute")
                        .HasForeignKey("CoreLib.Entitys.Dispute", "deal_fk")
                        .HasConstraintName("fk_disputes_deals_deal_fk");

                    b.Navigation("Arbitor");

                    b.Navigation("Deal");
                });

            modelBuilder.Entity("CoreLib.Entitys.Image", b =>
                {
                    b.HasOne("CoreLib.Entitys.Invoices.ConversationMessage", "ConversationMessage")
                        .WithMany("Images")
                        .HasForeignKey("ConversationMessageId")
                        .HasConstraintName("fk_images_conversation_message_conversation_message_id");

                    b.HasOne("CoreLib.Entitys.DealMessage", "DealMessage")
                        .WithMany("Images")
                        .HasForeignKey("deal_message_fk")
                        .HasConstraintName("fk_images_deal_message_deal_message_fk");

                    b.HasOne("CoreLib.Entitys.Invoices.Invoice", "Invoice")
                        .WithMany("Images")
                        .HasForeignKey("invoice_fk")
                        .HasConstraintName("fk_images_invoices_invoice_fk");

                    b.HasOne("CoreLib.Entitys.Invoices.InvoiceSecret", "Secret")
                        .WithMany("Images")
                        .HasForeignKey("invoice_secret_fk")
                        .HasConstraintName("fk_images_invoice_secret_invoice_secret_fk");

                    b.HasOne("CoreLib.Entitys.UserDataParts.UserData", "Owner")
                        .WithMany("Images")
                        .HasForeignKey("owner_fk")
                        .HasConstraintName("fk_images_user_datas_owner_fk");

                    b.Navigation("ConversationMessage");

                    b.Navigation("DealMessage");

                    b.Navigation("Invoice");

                    b.Navigation("Owner");

                    b.Navigation("Secret");
                });

            modelBuilder.Entity("CoreLib.Entitys.InAddress", b =>
                {
                    b.HasOne("CoreLib.Entitys.BtcCoreWallet", "BtcCoreWallet")
                        .WithMany("InputAddresses")
                        .HasForeignKey("BtcCoreWalletId")
                        .HasConstraintName("fk_in_address_btc_core_wallets_btc_core_wallet_id");

                    b.HasOne("CoreLib.Entitys.UserDataParts.UserData", "Owner")
                        .WithMany("InAddresses")
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("fk_in_address_user_datas_owner_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BtcCoreWallet");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("CoreLib.Entitys.InTransaction", b =>
                {
                    b.HasOne("CoreLib.Entitys.InAddress", "Address")
                        .WithMany("Transactions")
                        .HasForeignKey("AddressId")
                        .HasConstraintName("fk_in_transaction_in_address_address_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("CoreLib.Entitys.Invoices.Conversation", b =>
                {
                    b.HasOne("CoreLib.Entitys.UserDataParts.UserData", "Buyer")
                        .WithMany()
                        .HasForeignKey("BuyerId")
                        .HasConstraintName("fk_conversation_user_datas_buyer_id");

                    b.HasOne("CoreLib.Entitys.UserDataParts.UserData", "Seller")
                        .WithMany()
                        .HasForeignKey("SellerId")
                        .HasConstraintName("fk_conversation_user_datas_seller_id");

                    b.HasOne("CoreLib.Entitys.Invoices.Invoice", "Invoice")
                        .WithMany("Conversations")
                        .HasForeignKey("invoice_fk")
                        .HasConstraintName("fk_conversation_invoices_invoice_fk");

                    b.HasOne("CoreLib.Entitys.Invoices.InvoicePayment", "Payment")
                        .WithOne("Conversation")
                        .HasForeignKey("CoreLib.Entitys.Invoices.Conversation", "payment_fk")
                        .HasConstraintName("fk_conversation_invoice_payment_payment_fk");

                    b.Navigation("Buyer");

                    b.Navigation("Invoice");

                    b.Navigation("Payment");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("CoreLib.Entitys.Invoices.ConversationMessage", b =>
                {
                    b.HasOne("CoreLib.Entitys.Invoices.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .HasConstraintName("fk_conversation_message_conversation_conversation_id");

                    b.HasOne("CoreLib.Entitys.UserDataParts.UserData", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("fk_conversation_message_user_datas_owner_id");

                    b.Navigation("Conversation");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("CoreLib.Entitys.Invoices.Invoice", b =>
                {
                    b.HasOne("CoreLib.Entitys.Invoices.InvoicePayment", "Refund")
                        .WithMany("Refunds")
                        .HasForeignKey("RefundId")
                        .HasConstraintName("fk_invoices_invoice_payment_refund_id");

                    b.HasOne("CoreLib.Entitys.UserDataParts.UserData", "TargetUser")
                        .WithMany("ToMeInvoices")
                        .HasForeignKey("TargetUserId")
                        .HasConstraintName("fk_invoices_user_datas_target_user_id");

                    b.HasOne("CoreLib.Entitys.UserDataParts.UserData", "Owner")
                        .WithMany("MyInvoices")
                        .HasForeignKey("owner_fk")
                        .HasConstraintName("fk_invoices_user_datas_owner_fk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Refund");

                    b.Navigation("TargetUser");
                });

            modelBuilder.Entity("CoreLib.Entitys.Invoices.InvoiceIntegration", b =>
                {
                    b.HasOne("CoreLib.Entitys.Invoices.Invoice", "Invoice")
                        .WithOne("Integration")
                        .HasForeignKey("CoreLib.Entitys.Invoices.InvoiceIntegration", "invoice_fk")
                        .HasConstraintName("fk_invoice_integration_invoices_invoice_fk");

                    b.OwnsOne("CoreLib.Entitys.Invoices.Webhook", "Webhook", b1 =>
                        {
                            b1.Property<long>("InvoiceIntegrationId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasColumnName("id")
                                .UseIdentityByDefaultColumn();

                            b1.Property<string>("ClientCert")
                                .HasColumnType("text")
                                .HasColumnName("webhook_client_cert");

                            b1.Property<string>("ClientKey")
                                .HasColumnType("text")
                                .HasColumnName("webhook_client_key");

                            b1.Property<bool>("Required")
                                .HasColumnType("boolean")
                                .HasColumnName("webhook_required");

                            b1.Property<string>("ServerCert")
                                .HasColumnType("text")
                                .HasColumnName("webhook_server_cert");

                            b1.Property<string>("Url")
                                .HasColumnType("text")
                                .HasColumnName("webhook_url");

                            b1.HasKey("InvoiceIntegrationId")
                                .HasName("pk_invoice_integration");

                            b1.ToTable("invoice_integration");

                            b1.WithOwner()
                                .HasForeignKey("InvoiceIntegrationId")
                                .HasConstraintName("fk_invoice_integration_invoice_integration_id");
                        });

                    b.Navigation("Invoice");

                    b.Navigation("Webhook");
                });

            modelBuilder.Entity("CoreLib.Entitys.Invoices.InvoicePayment", b =>
                {
                    b.HasOne("CoreLib.Entitys.Snapshots.InvoiceSnapshot", "InvoiceSnapshot")
                        .WithMany()
                        .HasForeignKey("InvoiceSnapshotKey")
                        .HasConstraintName("fk_invoice_payment_invoice_snapshot_invoice_snapshot_key");

                    b.HasOne("CoreLib.Entitys.Invoices.InvoicePaymentFeedback", "OwnerFeedback")
                        .WithMany()
                        .HasForeignKey("OwnerFeedbackId")
                        .HasConstraintName("fk_invoice_payment_invoice_payment_feedback_owner_feedback_id");

                    b.HasOne("CoreLib.Entitys.Invoices.InvoicePaymentFeedback", "SellerFeedback")
                        .WithMany()
                        .HasForeignKey("SellerFeedbackId")
                        .HasConstraintName("fk_invoice_payment_invoice_payment_feedback_seller_feedback_id");

                    b.HasOne("CoreLib.Entitys.Invoices.Invoice", "Invoice")
                        .WithMany("Payments")
                        .HasForeignKey("invoice_fk")
                        .HasConstraintName("fk_invoice_payment_invoices_invoice_fk");

                    b.HasOne("CoreLib.Entitys.UserDataParts.UserData", "Owner")
                        .WithMany("MyPayments")
                        .HasForeignKey("owner_fk")
                        .HasConstraintName("fk_invoice_payment_user_datas_owner_fk");

                    b.Navigation("Invoice");

                    b.Navigation("InvoiceSnapshot");

                    b.Navigation("Owner");

                    b.Navigation("OwnerFeedback");

                    b.Navigation("SellerFeedback");
                });

            modelBuilder.Entity("CoreLib.Entitys.Invoices.InvoicePaymentFeedback", b =>
                {
                    b.HasOne("CoreLib.Entitys.UserDataParts.UserData", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("fk_invoice_payment_feedback_user_datas_owner_id");

                    b.HasOne("CoreLib.Entitys.UserDataParts.UserData", "To")
                        .WithMany("PaymentsFeedbacksToMe")
                        .HasForeignKey("ToId")
                        .HasConstraintName("fk_invoice_payment_feedback_user_datas_to_id");

                    b.Navigation("Owner");

                    b.Navigation("To");
                });

            modelBuilder.Entity("CoreLib.Entitys.Invoices.InvoiceSecret", b =>
                {
                    b.HasOne("CoreLib.Entitys.Invoices.InvoicePayment", "Payment")
                        .WithMany("Secrets")
                        .HasForeignKey("PaymentId")
                        .HasConstraintName("fk_invoice_secret_invoice_payment_payment_id");

                    b.HasOne("CoreLib.Entitys.Invoices.Invoice", "Invoice")
                        .WithMany("Secrets")
                        .HasForeignKey("invoice_fk")
                        .HasConstraintName("fk_invoice_secret_invoices_invoice_fk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("CoreLib.Entitys.LN.LNInvoice", b =>
                {
                    b.HasOne("CoreLib.Entitys.UserDataParts.UserData", "Owner")
                        .WithMany("LNInvoices")
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("fk_lninvoices_user_datas_owner_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entitys.Deal", "Deal")
                        .WithOne("FundingLnInvoice")
                        .HasForeignKey("CoreLib.Entitys.LN.LNInvoice", "deal_fk")
                        .HasConstraintName("fk_lninvoices_deals_deal_fk");

                    b.HasOne("CoreLib.Entitys.Invoices.InvoicePayment", "Payment")
                        .WithOne("LNInvoice")
                        .HasForeignKey("CoreLib.Entitys.LN.LNInvoice", "payment_fk")
                        .HasConstraintName("fk_lninvoices_invoice_payment_payment_fk");

                    b.Navigation("Deal");

                    b.Navigation("Owner");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("CoreLib.Entitys.LN.LnPaymentRequest", b =>
                {
                    b.HasOne("CoreLib.Entitys.Deal", "Deal")
                        .WithOne("WithdrawalLNPaymentRequest")
                        .HasForeignKey("CoreLib.Entitys.LN.LnPaymentRequest", "deal_fk")
                        .HasConstraintName("fk_ln_payment_requests_deals_deal_fk");

                    b.HasOne("CoreLib.Entitys.UserDataParts.UserData", "Owner")
                        .WithMany("LNPaymentRequests")
                        .HasForeignKey("owner_fk")
                        .HasConstraintName("fk_ln_payment_requests_user_datas_owner_fk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Deal");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("CoreLib.Entitys.OutTransaction", b =>
                {
                    b.HasOne("CoreLib.Entitys.BtcCoreWallet", "Wallet")
                        .WithMany()
                        .HasForeignKey("WalletId")
                        .HasConstraintName("fk_out_transaction_btc_core_wallets_wallet_id");

                    b.HasOne("CoreLib.Entitys.OutTransactionRequest", "Request")
                        .WithOne("Transaction")
                        .HasForeignKey("CoreLib.Entitys.OutTransaction", "request_id")
                        .HasConstraintName("fk_out_transaction_out_transaction_requests_request_id");

                    b.Navigation("Request");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("CoreLib.Entitys.OutTransactionRequest", b =>
                {
                    b.HasOne("CoreLib.Entitys.BtcCoreWallet", null)
                        .WithMany("OutTransactionRequests")
                        .HasForeignKey("BtcCoreWalletId")
                        .HasConstraintName("fk_out_transaction_requests_btc_core_wallets_btc_core_wallet_id");

                    b.HasOne("CoreLib.Entitys.UserDataParts.UserData", "Owner")
                        .WithMany("OutTransactions")
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("fk_out_transaction_requests_user_datas_owner_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entitys.Deal", "Deal")
                        .WithOne("WithdrawalBtcRequest")
                        .HasForeignKey("CoreLib.Entitys.OutTransactionRequest", "deal_fk")
                        .HasConstraintName("fk_out_transaction_requests_deals_deal_fk");

                    b.Navigation("Deal");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("CoreLib.Entitys.Promise", b =>
                {
                    b.HasOne("CoreLib.Entitys.UserDataParts.UserData", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .HasConstraintName("fk_promises_user_datas_creator_id");

                    b.HasOne("CoreLib.Entitys.Invoices.InvoicePayment", null)
                        .WithOne("OddPromise")
                        .HasForeignKey("CoreLib.Entitys.Promise", "InvoicePaymentId")
                        .HasConstraintName("fk_promises_invoice_payment_invoice_payment_id");

                    b.HasOne("CoreLib.Entitys.Deal", "Deal")
                        .WithOne("Promise")
                        .HasForeignKey("CoreLib.Entitys.Promise", "deal_locked_fk")
                        .HasConstraintName("fk_promises_deals_deal_locked_fk");

                    b.HasOne("CoreLib.Entitys.Invoices.InvoicePayment", "Payment")
                        .WithMany()
                        .HasForeignKey("payment_fk")
                        .HasConstraintName("fk_promises_invoice_payment_payment_fk");

                    b.Navigation("Creator");

                    b.Navigation("Deal");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("CoreLib.Entitys.Snapshots.InvoiceSnapshot", b =>
                {
                    b.HasOne("CoreLib.Entitys.UserDataParts.UserData", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("fk_invoice_snapshot_user_datas_owner_id");

                    b.HasOne("CoreLib.Entitys.UserDataParts.UserData", "TargetUser")
                        .WithMany()
                        .HasForeignKey("TargetUserId")
                        .HasConstraintName("fk_invoice_snapshot_user_datas_target_user_id");

                    b.Navigation("Owner");

                    b.Navigation("TargetUser");
                });

            modelBuilder.Entity("CoreLib.Entitys.TimeTableItem", b =>
                {
                    b.HasOne("CoreLib.Entitys.Advertisement", null)
                        .WithMany("TimeTable")
                        .HasForeignKey("AdvertisementId")
                        .HasConstraintName("fk_time_table_item_advertisements_advertisement_id");
                });

            modelBuilder.Entity("CoreLib.Entitys.TrustedUser", b =>
                {
                    b.HasOne("CoreLib.Entitys.UserDataParts.UserData", "Owner")
                        .WithMany("TrustedUsers")
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("fk_trusted_user_user_datas_owner_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoreLib.Entitys.UserDataParts.UserData", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_trusted_user_user_datas_user_id");

                    b.Navigation("Owner");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoreLib.Entitys.UserBalance", b =>
                {
                    b.HasOne("CoreLib.Entitys.UserDataParts.UserData", "Owner")
                        .WithOne("Balance")
                        .HasForeignKey("CoreLib.Entitys.UserBalance", "owner_fk")
                        .HasConstraintName("fk_user_balance_user_datas_owner_fk");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("CoreLib.Entitys.UserDataParts.UserData", b =>
                {
                    b.OwnsOne("CoreLib.Entitys.UserDataParts.UserData+BoughtOptions", "Options", b1 =>
                        {
                            b1.Property<long>("OwnerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasColumnName("id")
                                .UseIdentityByDefaultColumn();

                            b1.Property<int>("AutoPrice")
                                .HasColumnType("integer")
                                .HasColumnName("options_auto_price");

                            b1.HasKey("OwnerId")
                                .HasName("pk_user_datas");

                            b1.ToTable("user_datas");

                            b1.WithOwner("Owner")
                                .HasForeignKey("OwnerId")
                                .HasConstraintName("fk_user_datas_user_datas_id");

                            b1.Navigation("Owner");
                        });

                    b.OwnsOne("CoreLib.Entitys.UserDataParts.UserData+LastAdSearchBuyClass", "LastAdSearchBuy", b1 =>
                        {
                            b1.Property<long>("OwnerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasColumnName("id")
                                .UseIdentityByDefaultColumn();

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric")
                                .HasColumnName("last_ad_search_buy_amount");

                            b1.Property<int>("Country")
                                .HasColumnType("integer")
                                .HasColumnName("last_ad_search_buy_country");

                            b1.Property<int>("Currency")
                                .HasColumnType("integer")
                                .HasColumnName("last_ad_search_buy_currency");

                            b1.Property<int>("PaymentType")
                                .HasColumnType("integer")
                                .HasColumnName("last_ad_search_buy_payment_type");

                            b1.HasKey("OwnerId")
                                .HasName("pk_user_datas");

                            b1.ToTable("user_datas");

                            b1.WithOwner("Owner")
                                .HasForeignKey("OwnerId")
                                .HasConstraintName("fk_user_datas_user_datas_id");

                            b1.Navigation("Owner");
                        });

                    b.OwnsOne("CoreLib.Entitys.UserDataParts.UserData+LastAdSearchSellClass", "LastAdSearchSell", b1 =>
                        {
                            b1.Property<long>("OwnerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasColumnName("id")
                                .UseIdentityByDefaultColumn();

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric")
                                .HasColumnName("last_ad_search_sell_amount");

                            b1.Property<int>("Country")
                                .HasColumnType("integer")
                                .HasColumnName("last_ad_search_sell_country");

                            b1.Property<int>("Currency")
                                .HasColumnType("integer")
                                .HasColumnName("last_ad_search_sell_currency");

                            b1.Property<int>("PaymentType")
                                .HasColumnType("integer")
                                .HasColumnName("last_ad_search_sell_payment_type");

                            b1.HasKey("OwnerId")
                                .HasName("pk_user_datas");

                            b1.ToTable("user_datas");

                            b1.WithOwner("Owner")
                                .HasForeignKey("OwnerId")
                                .HasConstraintName("fk_user_datas_user_datas_id");

                            b1.Navigation("Owner");
                        });

                    b.OwnsOne("CoreLib.Entitys.UserDataParts.UserData+UserDataAds", "AdsData", b1 =>
                        {
                            b1.Property<long>("UserId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasColumnName("id")
                                .UseIdentityByDefaultColumn();

                            b1.HasKey("UserId")
                                .HasName("pk_user_datas");

                            b1.ToTable("user_datas");

                            b1.WithOwner("User")
                                .HasForeignKey("UserId")
                                .HasConstraintName("fk_user_datas_user_datas_id");

                            b1.Navigation("User");
                        });

                    b.OwnsOne("CoreLib.Entitys.UserDataParts.UserData+UserDataBtc", "BtcData", b1 =>
                        {
                            b1.Property<long>("UserId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasColumnName("id")
                                .UseIdentityByDefaultColumn();

                            b1.HasKey("UserId")
                                .HasName("pk_user_datas");

                            b1.ToTable("user_datas");

                            b1.WithOwner("User")
                                .HasForeignKey("UserId")
                                .HasConstraintName("fk_user_datas_user_datas_id");

                            b1.Navigation("User");
                        });

                    b.OwnsOne("CoreLib.Entitys.UserDataParts.UserData+UserDataDeals", "DealsData", b1 =>
                        {
                            b1.Property<long>("UserId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasColumnName("id")
                                .UseIdentityByDefaultColumn();

                            b1.Property<decimal>("AvgAmount")
                                .HasColumnType("numeric")
                                .HasColumnName("deals_data_avg_amount");

                            b1.Property<long>("AvgDelaySeconds")
                                .HasColumnType("bigint")
                                .HasColumnName("deals_data_avg_delay_seconds");

                            b1.Property<long>("Count")
                                .HasColumnType("bigint")
                                .HasColumnName("deals_data_count");

                            b1.Property<DateTime?>("DealDate")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("deals_data_deal_date");

                            b1.Property<long>("MedianDelaySeconds")
                                .HasColumnType("bigint")
                                .HasColumnName("deals_data_median_delay_seconds");

                            b1.Property<long>("PartnersCount")
                                .HasColumnType("bigint")
                                .HasColumnName("deals_data_partners_count");

                            b1.Property<decimal>("ResponseRate")
                                .HasColumnType("numeric")
                                .HasColumnName("deals_data_response_rate");

                            b1.HasKey("UserId")
                                .HasName("pk_user_datas");

                            b1.ToTable("user_datas");

                            b1.WithOwner("User")
                                .HasForeignKey("UserId")
                                .HasConstraintName("fk_user_datas_user_datas_id");

                            b1.Navigation("User");
                        });

                    b.OwnsOne("CoreLib.Entitys.UserDataParts.UserData+UserDataImages", "ImagesData", b1 =>
                        {
                            b1.Property<long>("UserId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasColumnName("id")
                                .UseIdentityByDefaultColumn();

                            b1.HasKey("UserId")
                                .HasName("pk_user_datas");

                            b1.ToTable("user_datas");

                            b1.WithOwner("User")
                                .HasForeignKey("UserId")
                                .HasConstraintName("fk_user_datas_user_datas_id");

                            b1.Navigation("User");
                        });

                    b.OwnsOne("CoreLib.Entitys.UserDataParts.UserData+UserDataInvoices", "InvoicesData", b1 =>
                        {
                            b1.Property<long>("UserId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasColumnName("id")
                                .UseIdentityByDefaultColumn();

                            b1.Property<int>("InvoiceCreatedCount")
                                .HasColumnType("integer")
                                .HasColumnName("invoices_data_invoice_created_count");

                            b1.Property<int>("NegativeFeedbacks")
                                .HasColumnType("integer")
                                .HasColumnName("invoices_data_negative_feedbacks");

                            b1.Property<int>("PaymentsPayedCount")
                                .HasColumnType("integer")
                                .HasColumnName("invoices_data_payments_payed_count");

                            b1.Property<decimal>("PaymentsPayedSumAmount")
                                .HasColumnType("numeric")
                                .HasColumnName("invoices_data_payments_payed_sum_amount");

                            b1.Property<int>("PaymentsReceivedCount")
                                .HasColumnType("integer")
                                .HasColumnName("invoices_data_payments_received_count");

                            b1.Property<decimal>("PaymentsReceivedSumAmount")
                                .HasColumnType("numeric")
                                .HasColumnName("invoices_data_payments_received_sum_amount");

                            b1.Property<int>("PositiveFeedbacks")
                                .HasColumnType("integer")
                                .HasColumnName("invoices_data_positive_feedbacks");

                            b1.HasKey("UserId")
                                .HasName("pk_user_datas");

                            b1.ToTable("user_datas");

                            b1.WithOwner("User")
                                .HasForeignKey("UserId")
                                .HasConstraintName("fk_user_datas_user_datas_id");

                            b1.Navigation("User");
                        });

                    b.OwnsOne("CoreLib.Entitys.UserDataParts.UserData+UserDataLn", "LnData", b1 =>
                        {
                            b1.Property<long>("UserId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasColumnName("id")
                                .UseIdentityByDefaultColumn();

                            b1.HasKey("UserId")
                                .HasName("pk_user_datas");

                            b1.ToTable("user_datas");

                            b1.WithOwner("User")
                                .HasForeignKey("UserId")
                                .HasConstraintName("fk_user_datas_user_datas_id");

                            b1.Navigation("User");
                        });

                    b.Navigation("AdsData");

                    b.Navigation("BtcData");

                    b.Navigation("DealsData");

                    b.Navigation("ImagesData");

                    b.Navigation("InvoicesData");

                    b.Navigation("LastAdSearchBuy");

                    b.Navigation("LastAdSearchSell");

                    b.Navigation("LnData");

                    b.Navigation("Options");
                });

            modelBuilder.Entity("CoreLib.Entitys.UserEvent", b =>
                {
                    b.HasOne("CoreLib.Entitys.Invoices.Conversation", "Conversation")
                        .WithMany()
                        .HasForeignKey("ConversationId")
                        .HasConstraintName("fk_user_event_conversation_conversation_id");

                    b.HasOne("CoreLib.Entitys.Deal", "Deal")
                        .WithMany()
                        .HasForeignKey("DealId")
                        .HasConstraintName("fk_user_event_deals_deal_id");

                    b.HasOne("CoreLib.Entitys.DealMessage", "DealMessage")
                        .WithMany()
                        .HasForeignKey("DealMessageId")
                        .HasConstraintName("fk_user_event_deal_message_deal_message_id");

                    b.HasOne("CoreLib.Entitys.Invoices.Invoice", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceId")
                        .HasConstraintName("fk_user_event_invoices_invoice_id");

                    b.HasOne("CoreLib.Entitys.Invoices.InvoicePayment", "InvoicePayment")
                        .WithMany()
                        .HasForeignKey("InvoicePaymentId")
                        .HasConstraintName("fk_user_event_invoice_payment_invoice_payment_id");

                    b.HasOne("CoreLib.Entitys.UserDataParts.UserData", "Creater")
                        .WithMany()
                        .HasForeignKey("creater_id")
                        .HasConstraintName("fk_user_event_user_datas_creater_id");

                    b.HasOne("CoreLib.Entitys.UserDataParts.UserData", "Receiver")
                        .WithMany("Events")
                        .HasForeignKey("receiver_id")
                        .HasConstraintName("fk_user_event_user_datas_receiver_id");

                    b.Navigation("Conversation");

                    b.Navigation("Creater");

                    b.Navigation("Deal");

                    b.Navigation("DealMessage");

                    b.Navigation("Invoice");

                    b.Navigation("InvoicePayment");

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("CoreLib.Entitys.UserLastOnline", b =>
                {
                    b.HasOne("CoreLib.Entitys.UserDataParts.UserData", "Owner")
                        .WithOne("LastOnline")
                        .HasForeignKey("CoreLib.Entitys.UserLastOnline", "owner_fk")
                        .HasConstraintName("fk_user_last_online_user_datas_owner_fk");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("CoreLib.Entitys.YmIdsConnection", b =>
                {
                    b.HasOne("CoreLib.Entitys.UserDataParts.UserData", "User")
                        .WithMany("YmIdsConnections")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_ym_ids_connections_user_datas_user_id");

                    b.HasOne("CoreLib.Entitys.YmId", "YmId")
                        .WithMany()
                        .HasForeignKey("YmIdId")
                        .HasConstraintName("fk_ym_ids_connections_ym_ids_ym_id_id");

                    b.Navigation("User");

                    b.Navigation("YmId");
                });

            modelBuilder.Entity("CoreLib.Entitys.Advertisement", b =>
                {
                    b.Navigation("TimeTable");
                });

            modelBuilder.Entity("CoreLib.Entitys.BtcCoreWallet", b =>
                {
                    b.Navigation("InputAddresses");

                    b.Navigation("OutTransactionRequests");
                });

            modelBuilder.Entity("CoreLib.Entitys.Deal", b =>
                {
                    b.Navigation("Dispute");

                    b.Navigation("FundingLnInvoice");

                    b.Navigation("Messages");

                    b.Navigation("Promise");

                    b.Navigation("WithdrawalBtcRequest");

                    b.Navigation("WithdrawalLNPaymentRequest");
                });

            modelBuilder.Entity("CoreLib.Entitys.DealMessage", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("CoreLib.Entitys.InAddress", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("CoreLib.Entitys.Invoices.Conversation", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("CoreLib.Entitys.Invoices.ConversationMessage", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("CoreLib.Entitys.Invoices.Invoice", b =>
                {
                    b.Navigation("Conversations");

                    b.Navigation("Images");

                    b.Navigation("Integration");

                    b.Navigation("Payments");

                    b.Navigation("Secrets");
                });

            modelBuilder.Entity("CoreLib.Entitys.Invoices.InvoicePayment", b =>
                {
                    b.Navigation("Conversation");

                    b.Navigation("Deal");

                    b.Navigation("LNInvoice");

                    b.Navigation("OddPromise");

                    b.Navigation("Refunds");

                    b.Navigation("Secrets");
                });

            modelBuilder.Entity("CoreLib.Entitys.Invoices.InvoiceSecret", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("CoreLib.Entitys.OutTransactionRequest", b =>
                {
                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("CoreLib.Entitys.UserDataParts.UserData", b =>
                {
                    b.Navigation("Advertisements");

                    b.Navigation("Balance");

                    b.Navigation("BlockedUsers");

                    b.Navigation("DealsAdOwner");

                    b.Navigation("DealsFeedbacksToMe");

                    b.Navigation("DealsInitiator");

                    b.Navigation("Events");

                    b.Navigation("Images");

                    b.Navigation("InAddresses");

                    b.Navigation("LastOnline");

                    b.Navigation("LNInvoices");

                    b.Navigation("LNPaymentRequests");

                    b.Navigation("MyInvoices");

                    b.Navigation("MyPayments");

                    b.Navigation("OutTransactions");

                    b.Navigation("PaymentsFeedbacksToMe");

                    b.Navigation("ToMeInvoices");

                    b.Navigation("TrustedUsers");

                    b.Navigation("YmIdsConnections");
                });
#pragma warning restore 612, 618
        }
    }
}
