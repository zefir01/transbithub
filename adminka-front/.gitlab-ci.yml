stages:
 - packages
 - build
 - docker
 - deploy

variables:
  IMAGE_TAG_TEST: $CI_REGISTRY_IMAGE:test-$CI_PIPELINE_ID
  IMAGE_TAG_PROD: $CI_REGISTRY_IMAGE:prod-$CI_PIPELINE_ID
  COPMPOSER_UPDATER_TAG: $CI_REGISTRY/root/temp-images/composer-updater:latest


get_packages:
  stage: packages
  image: node:latest
  retry: 2
  script:
    - npm ci
  artifacts:
    paths:
      - "*"
    exclude:
      - ".git"

build_test:
  stage: build
  image: node:latest
  script:
    - npm run --silent build:test
  dependencies:
    - get_packages
  variables:
    GIT_STRATEGY: none
    CI: "False"
  artifacts:
    paths:
      - build
      - default.conf
      - Dockerfile

build_prod:
  stage: build
  image: node:latest
  script:
    - npm run --silent build:prod
  dependencies:
    - get_packages
  variables:
    GIT_STRATEGY: none
    CI: "False"
  artifacts:
    paths:
      - build
      - default.conf
      - Dockerfile

docker_test:
  stage: docker
  image: docker
  dependencies:
    - build_test
  variables:
    GIT_STRATEGY: none
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -f Dockerfile -t $IMAGE_TAG_TEST .
    - docker push $IMAGE_TAG_TEST

docker_prod:
  stage: docker
  image: docker
  dependencies:
    - build_prod
  variables:
    GIT_STRATEGY: none
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -f Dockerfile -t $IMAGE_TAG_PROD .
    - docker push $IMAGE_TAG_PROD

update_image_test:
  stage: deploy
  image: $COPMPOSER_UPDATER_TAG
  variables:
    STACK: test
    SERVICE: adminka-front
    IMAGE_TAG_NAME: ADMINKA_FRONT_TAG
    GIT_STRATEGY: none
  when: manual
  timeout: 10 minutes
  retry: 2
  script:
    - export IMAGE_TAG=$IMAGE_TAG_TEST
    - mkdir ~/.ssh && chmod 0700 ~/.ssh
    - >
      echo "Host $master_ip
        StrictHostKeyChecking no" > ~/.ssh/config
    - echo $docker_context_ssh_publick_key | base64 -d > ~/.ssh/id_rsa.pub
    - echo $docker_context_ssh_private_key | base64 -d > ~/.ssh/id_rsa
    - chmod 0600 ~/.ssh/id_rsa.pub
    - chmod 0600 ~/.ssh/id_rsa
    - docker context create master --docker "host=ssh://root@$master_ip"
    - docker --context master login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker --context master service update --with-registry-auth --image $IMAGE_TAG ${STACK}_$SERVICE

    - git clone http://gitlab-ci-token:$VERSIONS_TOKEN@gitlab:8100/root/versions.git
    - cd versions
    - sed -i "s|^$IMAGE_TAG_NAME=.*$|$IMAGE_TAG_NAME=$IMAGE_TAG|g" test.env
    - git add -A
    - git config --global user.email "$CI_PROJECT_NAME@gitlab" && git config --global user.name $CI_PROJECT_NAME
    - "git commit -m \"Update $CI_PROJECT_TITLE with image: $IMAGE_TAG\""
    - git push
    - docker --context master logout $CI_REGISTRY

update_image_prod:
  stage: deploy
  image: $COPMPOSER_UPDATER_TAG
  variables:
    STACK: prod
    SERVICE: adminka-front
    IMAGE_TAG_NAME: ADMINKA_FRONT_TAG
    GIT_STRATEGY: none
  when: manual
  timeout: 10 minutes
  retry: 2
  script:
    - export IMAGE_TAG=$IMAGE_TAG_PROD
    - mkdir ~/.ssh && chmod 0700 ~/.ssh
    - >
      echo "Host $master_ip
        StrictHostKeyChecking no" > ~/.ssh/config
    - echo $docker_context_ssh_publick_key | base64 -d > ~/.ssh/id_rsa.pub
    - echo $docker_context_ssh_private_key | base64 -d > ~/.ssh/id_rsa
    - chmod 0600 ~/.ssh/id_rsa.pub
    - chmod 0600 ~/.ssh/id_rsa
    - docker context create master --docker "host=ssh://root@$master_ip"
    - docker --context master login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker --context master service update --with-registry-auth --image $IMAGE_TAG ${STACK}_$SERVICE

    - git clone http://gitlab-ci-token:$VERSIONS_TOKEN@gitlab:8100/root/versions.git
    - cd versions
    - sed -i "s|^$IMAGE_TAG_NAME=.*$|$IMAGE_TAG_NAME=$IMAGE_TAG|g" prod.env
    - git add -A
    - git config --global user.email "$CI_PROJECT_NAME@gitlab" && git config --global user.name $CI_PROJECT_NAME
    - "git commit -m \"Update $CI_PROJECT_TITLE with image: $IMAGE_TAG\""
    - git push
    - docker --context master logout $CI_REGISTRY
