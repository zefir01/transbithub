/* eslint-disable */
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
var Protos_api_pb = require('../Protos/api_pb.js');
goog.exportSymbol('proto.AdminkaSchema.V1.CancelDisputeRequest', null, global);
goog.exportSymbol('proto.AdminkaSchema.V1.CompleteDisputeRequest', null, global);
goog.exportSymbol('proto.AdminkaSchema.V1.Dispute', null, global);
goog.exportSymbol('proto.AdminkaSchema.V1.DisputeEvent', null, global);
goog.exportSymbol('proto.AdminkaSchema.V1.DisputeRequest', null, global);
goog.exportSymbol('proto.AdminkaSchema.V1.GetDealRequest', null, global);
goog.exportSymbol('proto.AdminkaSchema.V1.GetDisputesRequest', null, global);
goog.exportSymbol('proto.AdminkaSchema.V1.GetDisputesResponse', null, global);
goog.exportSymbol('proto.AdminkaSchema.V1.GetSupportAccountsResponse', null, global);
goog.exportSymbol('proto.AdminkaSchema.V1.GiveAwayDisputeRequest', null, global);
goog.exportSymbol('proto.AdminkaSchema.V1.Profile', null, global);
goog.exportSymbol('proto.AdminkaSchema.V1.SupportAccount', null, global);
goog.exportSymbol('proto.AdminkaSchema.V1.TransferDisputeRequest', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AdminkaSchema.V1.GetDisputesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AdminkaSchema.V1.GetDisputesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.AdminkaSchema.V1.GetDisputesRequest.displayName = 'proto.AdminkaSchema.V1.GetDisputesRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AdminkaSchema.V1.GetDisputesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.AdminkaSchema.V1.GetDisputesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AdminkaSchema.V1.GetDisputesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AdminkaSchema.V1.GetDisputesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    skip: jspb.Message.getFieldWithDefault(msg, 1, 0),
    take: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AdminkaSchema.V1.GetDisputesRequest}
 */
proto.AdminkaSchema.V1.GetDisputesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AdminkaSchema.V1.GetDisputesRequest;
  return proto.AdminkaSchema.V1.GetDisputesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AdminkaSchema.V1.GetDisputesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AdminkaSchema.V1.GetDisputesRequest}
 */
proto.AdminkaSchema.V1.GetDisputesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSkip(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTake(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AdminkaSchema.V1.GetDisputesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AdminkaSchema.V1.GetDisputesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AdminkaSchema.V1.GetDisputesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AdminkaSchema.V1.GetDisputesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSkip();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getTake();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 Skip = 1;
 * @return {number}
 */
proto.AdminkaSchema.V1.GetDisputesRequest.prototype.getSkip = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.AdminkaSchema.V1.GetDisputesRequest.prototype.setSkip = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 Take = 2;
 * @return {number}
 */
proto.AdminkaSchema.V1.GetDisputesRequest.prototype.getTake = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.AdminkaSchema.V1.GetDisputesRequest.prototype.setTake = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AdminkaSchema.V1.Dispute = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AdminkaSchema.V1.Dispute, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.AdminkaSchema.V1.Dispute.displayName = 'proto.AdminkaSchema.V1.Dispute';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AdminkaSchema.V1.Dispute.prototype.toObject = function(opt_includeInstance) {
  return proto.AdminkaSchema.V1.Dispute.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AdminkaSchema.V1.Dispute} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AdminkaSchema.V1.Dispute.toObject = function(includeInstance, msg) {
  var f, obj = {
    dealid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    arbitorid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    createdat: (f = msg.getCreatedat()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    paymenttype: jspb.Message.getFieldWithDefault(msg, 4, ""),
    fiatcurrency: jspb.Message.getFieldWithDefault(msg, 5, ""),
    isbuy: jspb.Message.getFieldWithDefault(msg, 6, false),
    fiatamount: (f = msg.getFiatamount()) && Protos_api_pb.Decimal.toObject(includeInstance, f),
    adownerinfo: (f = msg.getAdownerinfo()) && Protos_api_pb.UserInfo.toObject(includeInstance, f),
    initiator: (f = msg.getInitiator()) && Protos_api_pb.UserInfo.toObject(includeInstance, f),
    completed: jspb.Message.getFieldWithDefault(msg, 10, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AdminkaSchema.V1.Dispute}
 */
proto.AdminkaSchema.V1.Dispute.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AdminkaSchema.V1.Dispute;
  return proto.AdminkaSchema.V1.Dispute.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AdminkaSchema.V1.Dispute} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AdminkaSchema.V1.Dispute}
 */
proto.AdminkaSchema.V1.Dispute.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDealid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setArbitorid(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedat(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPaymenttype(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setFiatcurrency(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsbuy(value);
      break;
    case 7:
      var value = new Protos_api_pb.Decimal;
      reader.readMessage(value,Protos_api_pb.Decimal.deserializeBinaryFromReader);
      msg.setFiatamount(value);
      break;
    case 8:
      var value = new Protos_api_pb.UserInfo;
      reader.readMessage(value,Protos_api_pb.UserInfo.deserializeBinaryFromReader);
      msg.setAdownerinfo(value);
      break;
    case 9:
      var value = new Protos_api_pb.UserInfo;
      reader.readMessage(value,Protos_api_pb.UserInfo.deserializeBinaryFromReader);
      msg.setInitiator(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCompleted(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AdminkaSchema.V1.Dispute.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AdminkaSchema.V1.Dispute.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AdminkaSchema.V1.Dispute} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AdminkaSchema.V1.Dispute.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDealid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getArbitorid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCreatedat();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getPaymenttype();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getFiatcurrency();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getIsbuy();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getFiatamount();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      Protos_api_pb.Decimal.serializeBinaryToWriter
    );
  }
  f = message.getAdownerinfo();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      Protos_api_pb.UserInfo.serializeBinaryToWriter
    );
  }
  f = message.getInitiator();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      Protos_api_pb.UserInfo.serializeBinaryToWriter
    );
  }
  f = message.getCompleted();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
};


/**
 * optional uint64 DealId = 1;
 * @return {number}
 */
proto.AdminkaSchema.V1.Dispute.prototype.getDealid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.AdminkaSchema.V1.Dispute.prototype.setDealid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string ArbitorId = 2;
 * @return {string}
 */
proto.AdminkaSchema.V1.Dispute.prototype.getArbitorid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.AdminkaSchema.V1.Dispute.prototype.setArbitorid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional google.protobuf.Timestamp CreatedAt = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.AdminkaSchema.V1.Dispute.prototype.getCreatedat = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.AdminkaSchema.V1.Dispute.prototype.setCreatedat = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.AdminkaSchema.V1.Dispute.prototype.clearCreatedat = function() {
  this.setCreatedat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.AdminkaSchema.V1.Dispute.prototype.hasCreatedat = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string PaymentType = 4;
 * @return {string}
 */
proto.AdminkaSchema.V1.Dispute.prototype.getPaymenttype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.AdminkaSchema.V1.Dispute.prototype.setPaymenttype = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string FiatCurrency = 5;
 * @return {string}
 */
proto.AdminkaSchema.V1.Dispute.prototype.getFiatcurrency = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.AdminkaSchema.V1.Dispute.prototype.setFiatcurrency = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional bool IsBuy = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.AdminkaSchema.V1.Dispute.prototype.getIsbuy = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.AdminkaSchema.V1.Dispute.prototype.setIsbuy = function(value) {
  jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional CoreSchema.V1.Decimal FiatAmount = 7;
 * @return {?proto.CoreSchema.V1.Decimal}
 */
proto.AdminkaSchema.V1.Dispute.prototype.getFiatamount = function() {
  return /** @type{?proto.CoreSchema.V1.Decimal} */ (
    jspb.Message.getWrapperField(this, Protos_api_pb.Decimal, 7));
};


/** @param {?proto.CoreSchema.V1.Decimal|undefined} value */
proto.AdminkaSchema.V1.Dispute.prototype.setFiatamount = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.AdminkaSchema.V1.Dispute.prototype.clearFiatamount = function() {
  this.setFiatamount(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.AdminkaSchema.V1.Dispute.prototype.hasFiatamount = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional CoreSchema.V1.UserInfo AdOwnerInfo = 8;
 * @return {?proto.CoreSchema.V1.UserInfo}
 */
proto.AdminkaSchema.V1.Dispute.prototype.getAdownerinfo = function() {
  return /** @type{?proto.CoreSchema.V1.UserInfo} */ (
    jspb.Message.getWrapperField(this, Protos_api_pb.UserInfo, 8));
};


/** @param {?proto.CoreSchema.V1.UserInfo|undefined} value */
proto.AdminkaSchema.V1.Dispute.prototype.setAdownerinfo = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.AdminkaSchema.V1.Dispute.prototype.clearAdownerinfo = function() {
  this.setAdownerinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.AdminkaSchema.V1.Dispute.prototype.hasAdownerinfo = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional CoreSchema.V1.UserInfo Initiator = 9;
 * @return {?proto.CoreSchema.V1.UserInfo}
 */
proto.AdminkaSchema.V1.Dispute.prototype.getInitiator = function() {
  return /** @type{?proto.CoreSchema.V1.UserInfo} */ (
    jspb.Message.getWrapperField(this, Protos_api_pb.UserInfo, 9));
};


/** @param {?proto.CoreSchema.V1.UserInfo|undefined} value */
proto.AdminkaSchema.V1.Dispute.prototype.setInitiator = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.AdminkaSchema.V1.Dispute.prototype.clearInitiator = function() {
  this.setInitiator(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.AdminkaSchema.V1.Dispute.prototype.hasInitiator = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional bool Completed = 10;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.AdminkaSchema.V1.Dispute.prototype.getCompleted = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 10, false));
};


/** @param {boolean} value */
proto.AdminkaSchema.V1.Dispute.prototype.setCompleted = function(value) {
  jspb.Message.setProto3BooleanField(this, 10, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AdminkaSchema.V1.DisputeEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.AdminkaSchema.V1.DisputeEvent.oneofGroups_);
};
goog.inherits(proto.AdminkaSchema.V1.DisputeEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.AdminkaSchema.V1.DisputeEvent.displayName = 'proto.AdminkaSchema.V1.DisputeEvent';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.AdminkaSchema.V1.DisputeEvent.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.AdminkaSchema.V1.DisputeEvent.DataCase = {
  DATA_NOT_SET: 0,
  DISPUTE: 1,
  KEEPALIVE: 2
};

/**
 * @return {proto.AdminkaSchema.V1.DisputeEvent.DataCase}
 */
proto.AdminkaSchema.V1.DisputeEvent.prototype.getDataCase = function() {
  return /** @type {proto.AdminkaSchema.V1.DisputeEvent.DataCase} */(jspb.Message.computeOneofCase(this, proto.AdminkaSchema.V1.DisputeEvent.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AdminkaSchema.V1.DisputeEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.AdminkaSchema.V1.DisputeEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AdminkaSchema.V1.DisputeEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AdminkaSchema.V1.DisputeEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    dispute: (f = msg.getDispute()) && proto.AdminkaSchema.V1.Dispute.toObject(includeInstance, f),
    keepalive: jspb.Message.getFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AdminkaSchema.V1.DisputeEvent}
 */
proto.AdminkaSchema.V1.DisputeEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AdminkaSchema.V1.DisputeEvent;
  return proto.AdminkaSchema.V1.DisputeEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AdminkaSchema.V1.DisputeEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AdminkaSchema.V1.DisputeEvent}
 */
proto.AdminkaSchema.V1.DisputeEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.AdminkaSchema.V1.Dispute;
      reader.readMessage(value,proto.AdminkaSchema.V1.Dispute.deserializeBinaryFromReader);
      msg.setDispute(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setKeepalive(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AdminkaSchema.V1.DisputeEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AdminkaSchema.V1.DisputeEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AdminkaSchema.V1.DisputeEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AdminkaSchema.V1.DisputeEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDispute();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.AdminkaSchema.V1.Dispute.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional Dispute Dispute = 1;
 * @return {?proto.AdminkaSchema.V1.Dispute}
 */
proto.AdminkaSchema.V1.DisputeEvent.prototype.getDispute = function() {
  return /** @type{?proto.AdminkaSchema.V1.Dispute} */ (
    jspb.Message.getWrapperField(this, proto.AdminkaSchema.V1.Dispute, 1));
};


/** @param {?proto.AdminkaSchema.V1.Dispute|undefined} value */
proto.AdminkaSchema.V1.DisputeEvent.prototype.setDispute = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.AdminkaSchema.V1.DisputeEvent.oneofGroups_[0], value);
};


proto.AdminkaSchema.V1.DisputeEvent.prototype.clearDispute = function() {
  this.setDispute(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.AdminkaSchema.V1.DisputeEvent.prototype.hasDispute = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool KeepAlive = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.AdminkaSchema.V1.DisputeEvent.prototype.getKeepalive = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.AdminkaSchema.V1.DisputeEvent.prototype.setKeepalive = function(value) {
  jspb.Message.setOneofField(this, 2, proto.AdminkaSchema.V1.DisputeEvent.oneofGroups_[0], value);
};


proto.AdminkaSchema.V1.DisputeEvent.prototype.clearKeepalive = function() {
  jspb.Message.setOneofField(this, 2, proto.AdminkaSchema.V1.DisputeEvent.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.AdminkaSchema.V1.DisputeEvent.prototype.hasKeepalive = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AdminkaSchema.V1.GetDisputesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.AdminkaSchema.V1.GetDisputesResponse.repeatedFields_, null);
};
goog.inherits(proto.AdminkaSchema.V1.GetDisputesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.AdminkaSchema.V1.GetDisputesResponse.displayName = 'proto.AdminkaSchema.V1.GetDisputesResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.AdminkaSchema.V1.GetDisputesResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AdminkaSchema.V1.GetDisputesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.AdminkaSchema.V1.GetDisputesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AdminkaSchema.V1.GetDisputesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AdminkaSchema.V1.GetDisputesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    disputesList: jspb.Message.toObjectList(msg.getDisputesList(),
    proto.AdminkaSchema.V1.Dispute.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AdminkaSchema.V1.GetDisputesResponse}
 */
proto.AdminkaSchema.V1.GetDisputesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AdminkaSchema.V1.GetDisputesResponse;
  return proto.AdminkaSchema.V1.GetDisputesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AdminkaSchema.V1.GetDisputesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AdminkaSchema.V1.GetDisputesResponse}
 */
proto.AdminkaSchema.V1.GetDisputesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.AdminkaSchema.V1.Dispute;
      reader.readMessage(value,proto.AdminkaSchema.V1.Dispute.deserializeBinaryFromReader);
      msg.addDisputes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AdminkaSchema.V1.GetDisputesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AdminkaSchema.V1.GetDisputesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AdminkaSchema.V1.GetDisputesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AdminkaSchema.V1.GetDisputesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDisputesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.AdminkaSchema.V1.Dispute.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Dispute Disputes = 1;
 * @return {!Array<!proto.AdminkaSchema.V1.Dispute>}
 */
proto.AdminkaSchema.V1.GetDisputesResponse.prototype.getDisputesList = function() {
  return /** @type{!Array<!proto.AdminkaSchema.V1.Dispute>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.AdminkaSchema.V1.Dispute, 1));
};


/** @param {!Array<!proto.AdminkaSchema.V1.Dispute>} value */
proto.AdminkaSchema.V1.GetDisputesResponse.prototype.setDisputesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.AdminkaSchema.V1.Dispute=} opt_value
 * @param {number=} opt_index
 * @return {!proto.AdminkaSchema.V1.Dispute}
 */
proto.AdminkaSchema.V1.GetDisputesResponse.prototype.addDisputes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.AdminkaSchema.V1.Dispute, opt_index);
};


proto.AdminkaSchema.V1.GetDisputesResponse.prototype.clearDisputesList = function() {
  this.setDisputesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AdminkaSchema.V1.DisputeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AdminkaSchema.V1.DisputeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.AdminkaSchema.V1.DisputeRequest.displayName = 'proto.AdminkaSchema.V1.DisputeRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AdminkaSchema.V1.DisputeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.AdminkaSchema.V1.DisputeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AdminkaSchema.V1.DisputeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AdminkaSchema.V1.DisputeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    disputeid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AdminkaSchema.V1.DisputeRequest}
 */
proto.AdminkaSchema.V1.DisputeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AdminkaSchema.V1.DisputeRequest;
  return proto.AdminkaSchema.V1.DisputeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AdminkaSchema.V1.DisputeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AdminkaSchema.V1.DisputeRequest}
 */
proto.AdminkaSchema.V1.DisputeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDisputeid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AdminkaSchema.V1.DisputeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AdminkaSchema.V1.DisputeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AdminkaSchema.V1.DisputeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AdminkaSchema.V1.DisputeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDisputeid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 DisputeId = 1;
 * @return {number}
 */
proto.AdminkaSchema.V1.DisputeRequest.prototype.getDisputeid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.AdminkaSchema.V1.DisputeRequest.prototype.setDisputeid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AdminkaSchema.V1.GiveAwayDisputeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AdminkaSchema.V1.GiveAwayDisputeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.AdminkaSchema.V1.GiveAwayDisputeRequest.displayName = 'proto.AdminkaSchema.V1.GiveAwayDisputeRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AdminkaSchema.V1.GiveAwayDisputeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.AdminkaSchema.V1.GiveAwayDisputeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AdminkaSchema.V1.GiveAwayDisputeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AdminkaSchema.V1.GiveAwayDisputeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    disputeid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    userid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AdminkaSchema.V1.GiveAwayDisputeRequest}
 */
proto.AdminkaSchema.V1.GiveAwayDisputeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AdminkaSchema.V1.GiveAwayDisputeRequest;
  return proto.AdminkaSchema.V1.GiveAwayDisputeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AdminkaSchema.V1.GiveAwayDisputeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AdminkaSchema.V1.GiveAwayDisputeRequest}
 */
proto.AdminkaSchema.V1.GiveAwayDisputeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDisputeid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AdminkaSchema.V1.GiveAwayDisputeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AdminkaSchema.V1.GiveAwayDisputeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AdminkaSchema.V1.GiveAwayDisputeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AdminkaSchema.V1.GiveAwayDisputeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDisputeid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint64 DisputeId = 1;
 * @return {number}
 */
proto.AdminkaSchema.V1.GiveAwayDisputeRequest.prototype.getDisputeid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.AdminkaSchema.V1.GiveAwayDisputeRequest.prototype.setDisputeid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string UserId = 2;
 * @return {string}
 */
proto.AdminkaSchema.V1.GiveAwayDisputeRequest.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.AdminkaSchema.V1.GiveAwayDisputeRequest.prototype.setUserid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AdminkaSchema.V1.SupportAccount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AdminkaSchema.V1.SupportAccount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.AdminkaSchema.V1.SupportAccount.displayName = 'proto.AdminkaSchema.V1.SupportAccount';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AdminkaSchema.V1.SupportAccount.prototype.toObject = function(opt_includeInstance) {
  return proto.AdminkaSchema.V1.SupportAccount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AdminkaSchema.V1.SupportAccount} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AdminkaSchema.V1.SupportAccount.toObject = function(includeInstance, msg) {
  var f, obj = {
    username: jspb.Message.getFieldWithDefault(msg, 1, ""),
    id: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AdminkaSchema.V1.SupportAccount}
 */
proto.AdminkaSchema.V1.SupportAccount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AdminkaSchema.V1.SupportAccount;
  return proto.AdminkaSchema.V1.SupportAccount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AdminkaSchema.V1.SupportAccount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AdminkaSchema.V1.SupportAccount}
 */
proto.AdminkaSchema.V1.SupportAccount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AdminkaSchema.V1.SupportAccount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AdminkaSchema.V1.SupportAccount.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AdminkaSchema.V1.SupportAccount} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AdminkaSchema.V1.SupportAccount.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string Username = 1;
 * @return {string}
 */
proto.AdminkaSchema.V1.SupportAccount.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.AdminkaSchema.V1.SupportAccount.prototype.setUsername = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string Id = 2;
 * @return {string}
 */
proto.AdminkaSchema.V1.SupportAccount.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.AdminkaSchema.V1.SupportAccount.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AdminkaSchema.V1.GetSupportAccountsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.AdminkaSchema.V1.GetSupportAccountsResponse.repeatedFields_, null);
};
goog.inherits(proto.AdminkaSchema.V1.GetSupportAccountsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.AdminkaSchema.V1.GetSupportAccountsResponse.displayName = 'proto.AdminkaSchema.V1.GetSupportAccountsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.AdminkaSchema.V1.GetSupportAccountsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AdminkaSchema.V1.GetSupportAccountsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.AdminkaSchema.V1.GetSupportAccountsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AdminkaSchema.V1.GetSupportAccountsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AdminkaSchema.V1.GetSupportAccountsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    supportaccountsList: jspb.Message.toObjectList(msg.getSupportaccountsList(),
    proto.AdminkaSchema.V1.SupportAccount.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AdminkaSchema.V1.GetSupportAccountsResponse}
 */
proto.AdminkaSchema.V1.GetSupportAccountsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AdminkaSchema.V1.GetSupportAccountsResponse;
  return proto.AdminkaSchema.V1.GetSupportAccountsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AdminkaSchema.V1.GetSupportAccountsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AdminkaSchema.V1.GetSupportAccountsResponse}
 */
proto.AdminkaSchema.V1.GetSupportAccountsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.AdminkaSchema.V1.SupportAccount;
      reader.readMessage(value,proto.AdminkaSchema.V1.SupportAccount.deserializeBinaryFromReader);
      msg.addSupportaccounts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AdminkaSchema.V1.GetSupportAccountsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AdminkaSchema.V1.GetSupportAccountsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AdminkaSchema.V1.GetSupportAccountsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AdminkaSchema.V1.GetSupportAccountsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSupportaccountsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.AdminkaSchema.V1.SupportAccount.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SupportAccount SupportAccounts = 1;
 * @return {!Array<!proto.AdminkaSchema.V1.SupportAccount>}
 */
proto.AdminkaSchema.V1.GetSupportAccountsResponse.prototype.getSupportaccountsList = function() {
  return /** @type{!Array<!proto.AdminkaSchema.V1.SupportAccount>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.AdminkaSchema.V1.SupportAccount, 1));
};


/** @param {!Array<!proto.AdminkaSchema.V1.SupportAccount>} value */
proto.AdminkaSchema.V1.GetSupportAccountsResponse.prototype.setSupportaccountsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.AdminkaSchema.V1.SupportAccount=} opt_value
 * @param {number=} opt_index
 * @return {!proto.AdminkaSchema.V1.SupportAccount}
 */
proto.AdminkaSchema.V1.GetSupportAccountsResponse.prototype.addSupportaccounts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.AdminkaSchema.V1.SupportAccount, opt_index);
};


proto.AdminkaSchema.V1.GetSupportAccountsResponse.prototype.clearSupportaccountsList = function() {
  this.setSupportaccountsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AdminkaSchema.V1.TransferDisputeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AdminkaSchema.V1.TransferDisputeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.AdminkaSchema.V1.TransferDisputeRequest.displayName = 'proto.AdminkaSchema.V1.TransferDisputeRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AdminkaSchema.V1.TransferDisputeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.AdminkaSchema.V1.TransferDisputeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AdminkaSchema.V1.TransferDisputeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AdminkaSchema.V1.TransferDisputeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    disputeid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    supportaccountid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AdminkaSchema.V1.TransferDisputeRequest}
 */
proto.AdminkaSchema.V1.TransferDisputeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AdminkaSchema.V1.TransferDisputeRequest;
  return proto.AdminkaSchema.V1.TransferDisputeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AdminkaSchema.V1.TransferDisputeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AdminkaSchema.V1.TransferDisputeRequest}
 */
proto.AdminkaSchema.V1.TransferDisputeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDisputeid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSupportaccountid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AdminkaSchema.V1.TransferDisputeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AdminkaSchema.V1.TransferDisputeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AdminkaSchema.V1.TransferDisputeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AdminkaSchema.V1.TransferDisputeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDisputeid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getSupportaccountid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint64 DisputeId = 1;
 * @return {number}
 */
proto.AdminkaSchema.V1.TransferDisputeRequest.prototype.getDisputeid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.AdminkaSchema.V1.TransferDisputeRequest.prototype.setDisputeid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string SupportAccountId = 2;
 * @return {string}
 */
proto.AdminkaSchema.V1.TransferDisputeRequest.prototype.getSupportaccountid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.AdminkaSchema.V1.TransferDisputeRequest.prototype.setSupportaccountid = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AdminkaSchema.V1.CompleteDisputeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AdminkaSchema.V1.CompleteDisputeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.AdminkaSchema.V1.CompleteDisputeRequest.displayName = 'proto.AdminkaSchema.V1.CompleteDisputeRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AdminkaSchema.V1.CompleteDisputeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.AdminkaSchema.V1.CompleteDisputeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AdminkaSchema.V1.CompleteDisputeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AdminkaSchema.V1.CompleteDisputeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    disputeid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AdminkaSchema.V1.CompleteDisputeRequest}
 */
proto.AdminkaSchema.V1.CompleteDisputeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AdminkaSchema.V1.CompleteDisputeRequest;
  return proto.AdminkaSchema.V1.CompleteDisputeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AdminkaSchema.V1.CompleteDisputeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AdminkaSchema.V1.CompleteDisputeRequest}
 */
proto.AdminkaSchema.V1.CompleteDisputeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDisputeid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AdminkaSchema.V1.CompleteDisputeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AdminkaSchema.V1.CompleteDisputeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AdminkaSchema.V1.CompleteDisputeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AdminkaSchema.V1.CompleteDisputeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDisputeid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 DisputeId = 1;
 * @return {number}
 */
proto.AdminkaSchema.V1.CompleteDisputeRequest.prototype.getDisputeid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.AdminkaSchema.V1.CompleteDisputeRequest.prototype.setDisputeid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AdminkaSchema.V1.CancelDisputeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AdminkaSchema.V1.CancelDisputeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.AdminkaSchema.V1.CancelDisputeRequest.displayName = 'proto.AdminkaSchema.V1.CancelDisputeRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AdminkaSchema.V1.CancelDisputeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.AdminkaSchema.V1.CancelDisputeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AdminkaSchema.V1.CancelDisputeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AdminkaSchema.V1.CancelDisputeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    disputeid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AdminkaSchema.V1.CancelDisputeRequest}
 */
proto.AdminkaSchema.V1.CancelDisputeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AdminkaSchema.V1.CancelDisputeRequest;
  return proto.AdminkaSchema.V1.CancelDisputeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AdminkaSchema.V1.CancelDisputeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AdminkaSchema.V1.CancelDisputeRequest}
 */
proto.AdminkaSchema.V1.CancelDisputeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDisputeid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AdminkaSchema.V1.CancelDisputeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AdminkaSchema.V1.CancelDisputeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AdminkaSchema.V1.CancelDisputeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AdminkaSchema.V1.CancelDisputeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDisputeid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 DisputeId = 1;
 * @return {number}
 */
proto.AdminkaSchema.V1.CancelDisputeRequest.prototype.getDisputeid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.AdminkaSchema.V1.CancelDisputeRequest.prototype.setDisputeid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AdminkaSchema.V1.Profile = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AdminkaSchema.V1.Profile, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.AdminkaSchema.V1.Profile.displayName = 'proto.AdminkaSchema.V1.Profile';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AdminkaSchema.V1.Profile.prototype.toObject = function(opt_includeInstance) {
  return proto.AdminkaSchema.V1.Profile.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AdminkaSchema.V1.Profile} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AdminkaSchema.V1.Profile.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    username: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AdminkaSchema.V1.Profile}
 */
proto.AdminkaSchema.V1.Profile.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AdminkaSchema.V1.Profile;
  return proto.AdminkaSchema.V1.Profile.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AdminkaSchema.V1.Profile} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AdminkaSchema.V1.Profile}
 */
proto.AdminkaSchema.V1.Profile.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AdminkaSchema.V1.Profile.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AdminkaSchema.V1.Profile.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AdminkaSchema.V1.Profile} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AdminkaSchema.V1.Profile.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string UserId = 1;
 * @return {string}
 */
proto.AdminkaSchema.V1.Profile.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.AdminkaSchema.V1.Profile.prototype.setUserid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string UserName = 2;
 * @return {string}
 */
proto.AdminkaSchema.V1.Profile.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.AdminkaSchema.V1.Profile.prototype.setUsername = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AdminkaSchema.V1.GetDealRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AdminkaSchema.V1.GetDealRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.AdminkaSchema.V1.GetDealRequest.displayName = 'proto.AdminkaSchema.V1.GetDealRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AdminkaSchema.V1.GetDealRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.AdminkaSchema.V1.GetDealRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AdminkaSchema.V1.GetDealRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AdminkaSchema.V1.GetDealRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    dealid: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AdminkaSchema.V1.GetDealRequest}
 */
proto.AdminkaSchema.V1.GetDealRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AdminkaSchema.V1.GetDealRequest;
  return proto.AdminkaSchema.V1.GetDealRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AdminkaSchema.V1.GetDealRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AdminkaSchema.V1.GetDealRequest}
 */
proto.AdminkaSchema.V1.GetDealRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDealid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AdminkaSchema.V1.GetDealRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AdminkaSchema.V1.GetDealRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AdminkaSchema.V1.GetDealRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AdminkaSchema.V1.GetDealRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDealid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
};


/**
 * optional uint64 DealId = 1;
 * @return {number}
 */
proto.AdminkaSchema.V1.GetDealRequest.prototype.getDealid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.AdminkaSchema.V1.GetDealRequest.prototype.setDealid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


goog.object.extend(exports, proto.AdminkaSchema.V1);
