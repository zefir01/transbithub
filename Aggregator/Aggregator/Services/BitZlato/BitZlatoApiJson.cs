// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Aggregator.Services.BitZlato;
//
//    var bitZlatoApiJson = BitZlatoApiJson.FromJson(jsonString);

namespace Aggregator.Services.BitZlato
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class BitZlatoApiJson
    {
        [JsonProperty("total")]
        public long Total { get; set; }

        [JsonProperty("data")]
        public List<Datum> Data { get; set; }
    }

    public partial class Datum
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("cryptocurrency")]
        public string Cryptocurrency { get; set; }

        [JsonProperty("currency")]
        public string Currency { get; set; }

        [JsonProperty("rate")]
        [JsonConverter(typeof(ParseStringConverter))]
        public decimal Rate { get; set; }

        [JsonProperty("limitCurrency")]
        public LimitCcurrency LimitCurrency { get; set; }

        [JsonProperty("limitCryptocurrency")]
        public LimitCcurrency LimitCryptocurrency { get; set; }

        [JsonProperty("paymethod")]
        public Paymethod Paymethod { get; set; }

        [JsonProperty("paymethodId")]
        public long PaymethodId { get; set; }

        [JsonProperty("owner")]
        public string Owner { get; set; }

        [JsonProperty("ownerLastActivity")]
        public long OwnerLastActivity { get; set; }

        [JsonProperty("isOwnerVerificated")]
        public bool IsOwnerVerificated { get; set; }

        [JsonProperty("safeMode")]
        public bool SafeMode { get; set; }

        [JsonProperty("ownerTrusted")]
        public bool OwnerTrusted { get; set; }

        [JsonProperty("ownerBalance")]
        public object OwnerBalance { get; set; }
    }

    public partial class LimitCcurrency
    {
        [JsonProperty("min")]
        [JsonConverter(typeof(ParseStringConverter))]
        public decimal Min { get; set; }

        [JsonProperty("max")]
        public decimal Max { get; set; }

        [JsonProperty("realMax")]
        public object RealMax { get; set; }
    }

    public partial class Paymethod
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }
    }

    public partial class BitZlatoApiJson
    {
        public static BitZlatoApiJson FromJson(string json) => JsonConvert.DeserializeObject<BitZlatoApiJson>(json, Aggregator.Services.BitZlato.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this BitZlatoApiJson self) => JsonConvert.SerializeObject(self, Aggregator.Services.BitZlato.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(decimal) || t == typeof(decimal?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            decimal l;
            if (decimal.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type decimal");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
