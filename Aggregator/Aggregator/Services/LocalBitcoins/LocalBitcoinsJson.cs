// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Aggregator.Services.LocalBitcoins;
//
//    var localBitcoinsJson = LocalBitcoinsJson.FromJson(jsonString);

namespace Aggregator.Services.LocalBitcoins
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class LocalBitcoinsJson
    {
        [JsonProperty("data")]
        public LocalBitcoinsJsonData Data { get; set; }

        [JsonProperty("pagination")]
        public Pagination Pagination { get; set; }
    }

    public partial class LocalBitcoinsJsonData
    {
        [JsonProperty("ad_list")]
        public List<AdList> AdList { get; set; }

        [JsonProperty("ad_count")]
        public long AdCount { get; set; }
    }

    public partial class AdList
    {
        [JsonProperty("data")]
        public AdListData Data { get; set; }

        [JsonProperty("actions")]
        public Actions Actions { get; set; }
    }

    public partial class Actions
    {
        [JsonProperty("public_view")]
        public Uri PublicView { get; set; }
    }

    public partial class AdListData
    {
        [JsonProperty("profile")]
        public Profile Profile { get; set; }

        [JsonProperty("visible")]
        public bool Visible { get; set; }

        [JsonProperty("hidden_by_opening_hours")]
        public bool HiddenByOpeningHours { get; set; }

        [JsonProperty("location_string")]
        public string LocationString { get; set; }

        [JsonProperty("countrycode")]
        public string Countrycode { get; set; }

        [JsonProperty("city")]
        public string City { get; set; }

        [JsonProperty("trade_type")]
        public TradeType TradeType { get; set; }

        [JsonProperty("online_provider")]
        public string OnlineProvider { get; set; }

        [JsonProperty("first_time_limit_btc")]
        public string FirstTimeLimitBtc { get; set; }

        [JsonProperty("volume_coefficient_btc")]
        public decimal VolumeCoefficientBtc { get; set; }

        [JsonProperty("sms_verification_required")]
        public bool SmsVerificationRequired { get; set; }

        [JsonProperty("currency")]
        public string Currency { get; set; }

        [JsonProperty("lat")]
        public long Lat { get; set; }

        [JsonProperty("lon")]
        public long Lon { get; set; }

        [JsonProperty("min_amount", NullValueHandling = NullValueHandling.Ignore)]
        public decimal MinAmount { get; set; }

        [JsonProperty("max_amount", NullValueHandling = NullValueHandling.Ignore)]
        public decimal MaxAmount { get; set; }

        [JsonProperty("max_amount_available")]
        public decimal MaxAmountAvailable { get; set; }

        [JsonProperty("ad_id")]
        public long AdId { get; set; }

        [JsonProperty("temp_price_usd")]
        public decimal TempPriceUsd { get; set; }

        [JsonProperty("temp_price")]
        public decimal TempPrice { get; set; }

        [JsonProperty("created_at")]
        public DateTimeOffset CreatedAt { get; set; }

        [JsonProperty("require_feedback_score")]
        public decimal RequireFeedbackScore { get; set; }

        [JsonProperty("require_trade_volume")]
        public decimal RequireTradeVolume { get; set; }

        [JsonProperty("msg")]
        public string Msg { get; set; }

        [JsonProperty("bank_name")]
        public string BankName { get; set; }

        [JsonProperty("atm_model")]
        public object AtmModel { get; set; }

        [JsonProperty("require_trusted_by_advertiser")]
        public bool RequireTrustedByAdvertiser { get; set; }

        [JsonProperty("require_identification")]
        public bool RequireIdentification { get; set; }

        [JsonProperty("is_local_office")]
        public bool IsLocalOffice { get; set; }

        [JsonProperty("payment_window_minutes")]
        public int PaymentWindowMinutes { get; set; }

        [JsonProperty("limit_to_fiat_amounts")]
        public string LimitToFiatAmounts { get; set; }
    }

    public partial class Profile
    {
        [JsonProperty("username")]
        public string Username { get; set; }

        [JsonProperty("trade_count")]
        public string TradeCount { get; set; }

        [JsonProperty("feedback_score")]
        public decimal FeedbackScore { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("last_online")]
        public DateTime LastOnline { get; set; }
    }

    public partial class Pagination
    {
        [JsonProperty("next")]
        public Uri Next { get; set; }
    }

    public enum TradeType
    {
        OnlineSell,
        OnlineBuy
    };

    public partial class LocalBitcoinsJson
    {
        public static LocalBitcoinsJson FromJson(string json) => JsonConvert.DeserializeObject<LocalBitcoinsJson>(json, Aggregator.Services.LocalBitcoins.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this LocalBitcoinsJson self) => JsonConvert.SerializeObject(self, Aggregator.Services.LocalBitcoins.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                TradeTypeConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class TradeTypeConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TradeType) || t == typeof(TradeType?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "ONLINE_SELL")
            {
                return TradeType.OnlineSell;
            }
            else if (value == "ONLINE_BUY")
            {
                return TradeType.OnlineSell;
            }
            throw new Exception("Cannot unmarshal type TradeType");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TradeType)untypedValue;
            if (value == TradeType.OnlineSell)
            {
                serializer.Serialize(writer, "ONLINE_SELL");
                return;
            }
            else if (value == TradeType.OnlineBuy)
            {
                serializer.Serialize(writer, "ONLINE_BUY");
                return;
            }
            throw new Exception("Cannot marshal type TradeType");
        }

        public static readonly TradeTypeConverter Singleton = new TradeTypeConverter();
    }
}
