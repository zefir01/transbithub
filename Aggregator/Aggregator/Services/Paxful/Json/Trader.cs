// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Aggregator.Services.Paxful.Json.Trader;
//
//    var trader = Trader.FromJson(jsonString);

namespace Aggregator.Services.Paxful.Json.Trader
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Trader
    {
        [JsonProperty("status")]
        public string Status { get; set; }

        [JsonProperty("timestamp")]
        public long Timestamp { get; set; }

        [JsonProperty("data")]
        public Data Data { get; set; }
    }

    public partial class Data
    {
        [JsonProperty("username")]
        public string Username { get; set; }

        [JsonProperty("feedback_positive")]
        public int FeedbackPositive { get; set; }

        [JsonProperty("feedback_negative")]
        public int FeedbackNegative { get; set; }

        [JsonProperty("total_partners")]
        public int TotalPartners { get; set; }

        [JsonProperty("total_trades")]
        public int TotalTrades { get; set; }

        [JsonProperty("trusted_by")]
        public int TrustedBy { get; set; }

        [JsonProperty("blocked_by")]
        public int BlockedBy { get; set; }

        [JsonProperty("joined")]
        public string Joined { get; set; }

        [JsonProperty("total_btc")]
        public string TotalBtc { get; set; }

        [JsonProperty("email_verified")]
        public bool EmailVerified { get; set; }

        [JsonProperty("phone_verified")]
        public bool PhoneVerified { get; set; }

        [JsonProperty("is_vendor", NullValueHandling = NullValueHandling.Ignore)]
        public bool IsVendor { get; set; }

        [JsonProperty("is_verified")]
        public bool IsVerified { get; set; }

        [JsonProperty("is_trusted")]
        public bool IsTrusted { get; set; }

        [JsonProperty("last_seen")]
        public string LastSeen { get; set; }

        [JsonProperty("avatar_url")]
        public Uri AvatarUrl { get; set; }

        [JsonProperty("status")]
        public string Status { get; set; }

        [JsonProperty("blocked_count")]
        public long BlockedCount { get; set; }

        [JsonProperty("completed_trades_with_me")]
        public long CompletedTradesWithMe { get; set; }
    }

    public partial class Trader
    {
        public static Trader FromJson(string json) => JsonConvert.DeserializeObject<Trader>(json, Aggregator.Services.Paxful.Json.Trader.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Trader self) => JsonConvert.SerializeObject(self, Aggregator.Services.Paxful.Json.Trader.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
